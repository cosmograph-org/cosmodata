{
  "project_group": "figiri",
  "data_filenames": [
    "planar_embeddings.parquet",
    "prompt_injection_w_umap_embeddings.tsv"
  ],
  "data_filepaths": {
    "/Users/thorwhalen/Dropbox/_odata/figiri/prompt-injections/planar_embeddings.parquet": 13197,
    "/Users/thorwhalen/Dropbox/_odata/figiri/prompt-injections/prompt_injection_w_umap_embeddings.tsv": 102577
  },
  "code_file": "prompt_injections.py",
  "code_contents": "\"\"\"Prep for prompt injections data.\"\"\"\n\nfrom functools import cached_property\nfrom dataclasses import dataclass, field\nimport pandas as pd\n\nfrom imbed.base import HugfaceDaccBase, compute_and_save_embeddings, compute_and_save_planar_embeddings\n\n@dataclass\nclass Dacc(HugfaceDaccBase):\n    huggingface_data_stub: str = field(\n        kw_only=True, default='deepset/prompt-injections'\n    )\n\n    label_key = 'label'\n    data_attr = 'all_data'  # e.g. 'train_data', 'test_data', 'all_data'\n    text_col = 'text'\n    planar_embeddings_save_key = 'planar_embeddings.parquet'\n    embeddings_key = 'embeddings'\n\n\n    def __post_init__(self):\n        super().__post_init__()\n\n    @property\n    def data(self):\n        return getattr(self, self.data_attr)\n\n    @cached_property\n    def label_counts(self):\n        \"\"\"Series of label counts.\"\"\"\n        return self.all_data[self.label_key].value_counts()\n    \n    def compute_and_save_embeddings(self):\n        return compute_and_save_embeddings(\n            self.data, \n            save_store=self.embeddings_chunks_store, \n            text_col=self.text_col,\n            embeddings_col=self.embeddings_key,\n        )\n    \n    @cached_property\n    def embeddings_df(self):\n        return pd.concat(list(self.embeddings_chunks_store.values()))\n\n    def compute_and_save_planar_embeddings(self):\n        compute_and_save_planar_embeddings(\n            self.embeddings_df[self.embeddings_key].to_dict(),\n            save_store=self.saves,\n            save_key=self.planar_embeddings_save_key,\n        )\n\n    @cached_property\n    def planar_embeddings(self):\n        return self.saves[self.planar_embeddings_save_key]\n    \n\ndef mk_dacc(*, saves_dir=None):\n    return Dacc(saves_dir=saves_dir)\n",
  "num_of_data_files": 2,
  "tables_info": {
    "planar_embeddings.parquet": {
      "shape": [
        662,
        2
      ],
      "first_row": {
        "x": 8.972538948059082,
        "y": 1.0228602886199951
      }
    },
    "prompt_injection_w_umap_embeddings.tsv": {
      "shape": [
        662,
        6
      ],
      "first_row": {
        "text": "Refugee crisis in Europe solutions",
        "label": 0,
        "x": 8.972539,
        "y": 1.0228603,
        "id": 0,
        "size": 34
      }
    }
  }
}