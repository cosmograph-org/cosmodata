{
  "project_group": "imbed_saves",
  "data_filenames": [
    "Icon\r",
    "pca_model.pkl",
    "planar_embeddings_first_forth.npy",
    "pca500.pkl",
    "kmeans_7_clusters_indices.pkl",
    "kmeans_14_clusters_indices.pkl",
    "kmeans_28_clusters_indices.pkl",
    "dbscan_7_kmeans.pkl",
    "planar_embeddings_pca500.npy",
    "ncvis_planar_pca500_embeddings.npy",
    "num_of_tokens.pkl",
    "planar_embeddings_of_grouped_conversations_with_metadata.tsv.zip",
    "planar_embeddings_grouped.tsv",
    "conversation_paths.tsv",
    "planar_embeddings_grouped.pkl",
    "planar_embeddings_of_grouped_conversations_with_metadata.tsv",
    "planar_embeddings_for_a_forth_of_data.tsv.zip",
    "planar_embeddings_for_a_forth_of_data.parquet",
    "planar_embeddings_for_a_forth_of_data.tsv",
    "flat_en.parquet",
    "lmsys_with_planar_embeddings_pca500.parquet",
    "flat_en_embeddings_pca100.npy",
    "flat_en_conversation_grouped_embeddings.parquet",
    "pca500_embeddings.npy"
  ],
  "data_filepaths": {
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/Icon\r": 0,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/pca_model.pkl": 1256504,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_first_forth.npy": 5671104,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/pca500.pkl": 6181310,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/kmeans_7_clusters_indices.pkl": 11342122,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/kmeans_14_clusters_indices.pkl": 11342122,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/kmeans_28_clusters_indices.pkl": 11342122,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/dbscan_7_kmeans.pkl": 11348179,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_pca500.npy": 22684048,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/ncvis_planar_pca500_embeddings.npy": 22684048,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/num_of_tokens.pkl": 23975730,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_of_grouped_conversations_with_metadata.tsv.zip": 32180527,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_grouped.tsv": 45993672,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/conversation_paths.tsv": 47010273,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_grouped.pkl": 51364649,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_of_grouped_conversations_with_metadata.tsv": 121927350,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_for_a_forth_of_data.tsv.zip": 193523605,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_for_a_forth_of_data.parquet": 268069996,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_for_a_forth_of_data.tsv": 603098065,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/flat_en.parquet": 1086856345,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/lmsys_with_planar_embeddings_pca500.parquet": 1099754417,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/flat_en_embeddings_pca100.npy": 2268392128,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/flat_en_conversation_grouped_embeddings.parquet": 7516951406,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/pca500_embeddings.npy": 11341960128
  },
  "code_file": "lmsys_ai_conversations.py",
  "code_contents": "\"\"\"\nLymsys AI Conversations\n\nSee paper: https://arxiv.org/pdf/2309.11998.pdf\nData here: https://huggingface.co/papers/2309.11998\n\n\"\"\"\n\nfrom functools import cached_property, partial\nimport os\nfrom dataclasses import dataclass\nfrom typing import List, Tuple, Dict, Any, Callable, Union, Literal\nfrom collections import Counter\nfrom itertools import chain\n\nimport pandas as pd\nimport numpy as np\nfrom datasets import load_dataset\n\nfrom dol import Files, add_ipython_key_completions\nfrom tabled import expand_rows, expand_columns\nfrom imbed.util import saves_join, merge_data, extension_based_wrap, counts\n\n\ndef concatenate_arrays(arrays):\n    \"\"\"Essentially, np.vstack(arrays) but faster\"\"\"\n    n_arrays = len(arrays)\n    array_size = len(arrays[0])\n    return np.concatenate(arrays).reshape(n_arrays, array_size)\n\n\ndata_name = 'lmsys-chat-1m'\nhuggingface_data_stub = 'lmsys/lmsys-chat-1m'\ndata_saves_join = partial(saves_join, data_name)\n\n\nDataSpec = Union[str, Any]\n\n\n@dataclass\nclass Dacc:\n    name = data_name\n\n    dataset_dict_loader: Callable = partial(load_dataset, huggingface_data_stub)\n    saves_dir: str = data_saves_join()\n\n    @cached_property\n    def saves_bytes_store(self):\n        if not os.path.isdir(self.saves_dir):\n            os.mkdir(self.saves_dir)\n        return Files(self.saves_dir)\n\n    @cached_property\n    def saves(self):\n        return add_ipython_key_completions(extension_based_wrap(self.saves_bytes_store))\n\n    def get_data(self, data_spec: DataSpec, *, assert_type=None):\n        if isinstance(data_spec, str):\n            # if data_spec is a string, check if it's an attribute or a key of saves\n            if hasattr(self, data_spec):\n                return getattr(self, data_spec)\n            elif data_spec in self.saves:\n                return self.saves[data_spec]\n        if assert_type:\n            assert isinstance(\n                data_spec, assert_type\n            ), f\"{data_spec=} is not {assert_type}\"\n        # just return the data_spec itself as the data\n        return data_spec\n\n    @cached_property\n    def dataset_dict(self):\n        return self.dataset_dict_loader()\n\n    @property\n    def _train_data(self):\n        return self.dataset_dict['train']\n\n    @cached_property\n    def train_data(self):\n        return self._train_data.to_pandas()\n\n    @cached_property\n    def conversation_sizes(self):\n        _conversation_sizes = self.train_data.conversation.apply(len)\n        assert all(\n            _conversation_sizes == self.train_data.turn * 2\n        ), \"Some turns were not twice the conversation size\"\n        return _conversation_sizes\n\n    @cached_property\n    def language_count(self):\n        return counts(self.train_data['language'])\n\n    @cached_property\n    def model_count(self):\n        return counts(self.train_data['model'])\n\n    @cached_property\n    def redacted_count(self):\n        return counts(self.train_data['redacted'])\n\n    @cached_property\n    def role_count(self):\n        c = Counter(\n            x['role'] for x in chain.from_iterable(self.train_data.conversation)\n        )\n        return pd.Series(dict(c.most_common()))\n\n    @cached_property\n    def en_df(self):\n        return self.train_data[self.train_data['language'] == 'English']\n\n    @cached_property\n    def flat_en(self):\n        t = self.en_df\n        t = expand_rows(t, ['conversation', 'openai_moderation'])\n        t = expand_columns(t, ['conversation', 'openai_moderation'], key_mapper=None)\n        t = expand_columns(t, ['categories'], key_mapper=None)\n        t = expand_columns(t, ['category_scores'])\n        return t\n\n    @cached_property\n    def flat_en_embeddable(self):\n        from oa.util import embeddings_models\n        from oa import text_is_valid\n        import numpy as np\n\n        model = 'text-embedding-3-small'\n        max_tokens = embeddings_models[model]['max_input']\n\n        # TODO: Make it source from self.flat_en directly (once persistent caching is working)\n        # TODO: Also make it check if dacc.flat_en is loaded or not before, and if not, unload it after using.\n        flat_en = self.saves['flat_en.parquet']\n\n        lidx = ~np.array(\n            list(\n                text_is_valid(\n                    flat_en.content,\n                    flat_en.num_of_tokens,\n                    max_tokens=max_tokens,\n                    model=model,\n                )\n            )\n        )\n        invalid_conversations = set(flat_en[lidx]['conversation_id'])\n\n        print(f\"{len(invalid_conversations)=}\")\n\n        df = flat_en[~flat_en.conversation_id.isin(invalid_conversations)]\n        return df\n\n    @property\n    def flat_en_embeddings_store(self):\n        from dol import KeyTemplate, cache_iter\n\n        key_template = KeyTemplate(\n            'flat_en_embeddings/{index}.parquet',\n            from_str_funcs={'index': int},\n            to_str_funcs={'index': \"{:04d}\".format},\n        )\n        s = key_template.filt_iter(self.saves)\n        s = key_template.key_codec(decoded='single')(s)\n        s = cache_iter(s, keys_cache=sorted)\n        return s\n\n    @cached_property\n    def flat_en_embeddings(self):\n        return pd.concat(self.flat_en_embeddings_store.values())\n\n    def flat_en_embeddings_iter(self):\n        \"\"\"Yields embeddings matrices\"\"\"\n        return map(\n            lambda x: concatenate_arrays(x['embeddings'].values),\n            self.flat_en_embeddings_store.values(),\n        )\n\n    @property\n    def embeddings_matrix(self):\n        # return np.vstack(self.flat_en_embeddings_iter())\n        return concatenate_arrays(self.flat_en_embeddings.embeddings.values)\n\n    @cached_property\n    def flat_en_conversation_grouped_embeddings(self):\n        # TODO: This is the kind of thing that the save decorator should take care of\n        if 'flat_en_conversation_grouped_embeddings.parquet' in self.saves:\n            return self.saves['flat_en_conversation_grouped_embeddings.parquet']\n        else:\n            g = self.flat_en_embeddings\n            g = g.drop(columns=['content'])\n            # groupby conversation_id, doing the following with, for each group:\n            g = g.groupby('conversation_id')\n            g = g.agg({'num_of_tokens': 'sum', 'embeddings': 'mean'})\n            self.saves['flat_en_conversation_grouped_embeddings.parquet'] = g\n            return g\n\n    def planar_embeddings_with_metadata(\n        self,\n        planar_embeddings: DataSpec,\n        metadata: DataSpec = 'flat_en_embeddable',\n        *,\n        merge_on=None,\n    ):\n        planar_embeddings = self.get_data(planar_embeddings)\n        metadata = self.get_data(metadata)\n\n        return merge_data(\n            metadata, planar_embeddings, merge_on=merge_on, data_2_cols=['x', 'y']\n        )\n\n    @property\n    def planar_embeddings_of_grouped_conversations(self):\n        t = self.saves['planar_embeddings_grouped.pkl']\n        t = pd.Series(t)\n        t = pd.DataFrame(t).reset_index()\n        t = t.rename(columns={'index': 'conversation_id'})\n        t['x'] = t[0].apply(lambda x: x[0])\n        t['y'] = t[0].apply(lambda x: x[1])\n        t = t.drop(0, axis=1)\n        t.index.name = 'id'\n        # self.saves['planar_embeddings_grouped.tsv'] = t\n        return t\n\n    @property\n    def meta_for_grouped_conversations(self):\n        meta = self.saves['flat_en.parquet']\n        nested_columns = list(filter(lambda x: '.' in x, meta.columns))\n        meta = meta.drop(\n            ['language', 'redacted', 'content', 'role'] + nested_columns, axis=1\n        )\n        aggregate_specs_1 = {\n            'model': lambda x: x[0],\n            'turn': lambda x: x[0],\n            'flagged': 'mean',\n            'num_of_tokens': 'sum',\n        }\n        remaining_columns = (\n            set(meta.columns) - set(aggregate_specs_1.keys()) - {'conversation_id'}\n        )\n        aggregate_specs = {\n            'model': 'first',\n            'turn': 'first',\n            'flagged': 'mean',\n            'num_of_tokens': 'sum',\n            **{col: 'mean' for col in remaining_columns},\n        }\n\n        # group by conversaion_id and apply aggaggregate_specs to each group\n        meta = meta.groupby('conversation_id').agg(aggregate_specs)\n        meta = meta.reset_index(drop=False)\n        return meta\n\n    @property\n    def planar_embeddings_of_grouped_conversations_with_metadata(self):\n        e = self.planar_embeddings_of_grouped_conversations\n        meta = self.meta_for_grouped_conversations\n        df = merge_data(e, meta, merge_on='conversation_id')\n        df['id'] = df.conversation_id  # just because cosmograph needs it!\n        return df\n        # dacc.saves['planar_embeddings_of_grouped_conversations_with_metadata.tsv'] = df\n\n\nLmsysDacc = Dacc  # backwards compatibility alias\n\n\ndef mk_dacc():\n    return Dacc()\n\n\n# def dataframe_to_embed(dacc=None):\n#     from oa.util import embeddings_models\n#     from oa import text_is_valid\n#     import numpy as np\n\n#     dacc = dacc or mk_dacc()\n\n#     model = 'text-embedding-3-small'\n#     max_tokens = embeddings_models[model]['max_input']\n\n#     flat_en = dacc.saves['flat_en.parquet']\n\n#     lidx = ~np.array(\n#         list(\n#             text_is_valid(\n#                 flat_en.content,\n#                 flat_en.num_of_tokens,\n#                 max_tokens=max_tokens,\n#                 model=model,\n#             )\n#         )\n#     )\n#     invalid_conversations = set(flat_en[lidx]['conversation_id'])\n\n#     print(f\"{len(invalid_conversations)=}\")\n\n#     df = flat_en[~flat_en.conversation_id.isin(invalid_conversations)]\n#     return df\n\nfrom imbed.util import clog\nfrom imbed.base import batches, DFLT_CHK_SIZE\n\n\ndef compute_and_save_embeddings(\n    dacc=None,\n    *,\n    chk_size=DFLT_CHK_SIZE,  # needs to be under max batch size of 2048\n    validate=False,\n    overwrite_chunks=False,\n    model='text-embedding-3-small',\n    verbose=1,\n    exclude_chk_ids=(),\n    include_chk_ids=(),\n):\n    _clog = partial(clog, verbose)\n    __clog = partial(clog, verbose >= 2)\n\n    dacc = dacc or mk_dacc()\n    df = dacc.flat_en_embeddable[['conversation_id', 'content', 'num_of_tokens']]\n\n    from oa import embeddings as embeddings_\n    import pandas as pd\n    from functools import partial\n    import os\n\n    embeddings = partial(embeddings_, validate=validate, model=model)\n\n    def key_for_chunk_index(i):\n        return f\"flat_en_embeddings/{i:04d}.parquet\"\n\n    def store_chunk(i, chunk):\n        save_path = os.path.join(dacc.saves.rootdir, key_for_chunk_index(i))\n        chunk.to_parquet(save_path)\n\n    for i, index_and_row in enumerate(batches(df, chk_size)):\n        if i in exclude_chk_ids or (include_chk_ids and i not in include_chk_ids):\n            # skip this chunk if it is in the exclude list or if the\n            # include list is not empty and this chunk is not in it\n            __clog(\n                f\"Skipping {i=} because it is in the exclude list or not in the include list.\"\n            )\n            continue\n        if not overwrite_chunks and key_for_chunk_index(i) in dacc.saves:\n            _clog(f\"Skipping {i=} because it is already saved.\")\n            continue\n        # else...\n        if i % 100 == 0:\n            _clog(f\"Processing {i=}\")\n        try:\n            chunk = pd.DataFrame(\n                [x[1] for x in index_and_row], index=[x[0] for x in index_and_row]\n            )\n            vectors = embeddings(chunk.content.tolist())\n            chunk['embeddings'] = vectors\n            store_chunk(i, chunk)\n        except Exception as e:\n            _clog(f\"--> ERROR: {i=}, {e=}\")\n\n\ndef compute_and_save_planar_embeddings(dacc=None, verbose=1):\n    from imbed import umap_2d_embeddings\n\n    dacc = dacc or mk_dacc()\n    _clog = partial(clog, verbose)\n\n    _clog(\"Getting flat_en_embeddings\")\n    dacc.flat_en_embeddings\n\n    _clog(f\"{len(dacc.flat_en_embeddings.shape)=}\")\n    _clog(\"Making an embeddings store from it, using flat_end_embeddings keys as keys\")\n    embdeddings_store = {\n        id_: row.embeddings for id_, row in dacc.flat_en_embeddings.iterrows()\n    }\n\n    _clog(\"Offload the flat_en_embeddings from memory\")\n    del dacc.flat_en_embeddings\n\n    _clog(\"Computing the 2d embeddings (the long process)...\")\n    planar_embeddings = umap_2d_embeddings(embdeddings_store)\n\n    _clog(\"Reformatting the embeddings into a DataFrame\")\n    planar_embeddings = pd.DataFrame(planar_embeddings, index=['x', 'y']).T\n\n    _clog(\"Saving the planar embeddings to planar_embeddings.parquet'\")\n    dacc.saves['planar_embeddings.parquet'] = planar_embeddings\n\n\ndef compute_and_save_incremental_pca(\n    dacc=None,\n    verbose=2,\n    *,\n    n_pca_components=500,\n    save_name='pca{pca_components}.pkl',\n):\n\n    dacc = dacc or mk_dacc()\n\n    save_name = save_name.format(pca_components=n_pca_components)\n\n    _clog = partial(clog, int(verbose))\n    __clog = partial(clog, int(verbose) >= 2)\n\n    # X = np.load(data_saves_join('flat_en_embeddings.npy'))\n\n    _clog(f\"Taking the PCA ({n_pca_components=}) of the embeddings...\")\n\n    from sklearn.decomposition import IncrementalPCA\n\n    # TODO: Make a chunker that ensures that the chunks are not too small for incremental PCA\n    pca = IncrementalPCA(n_components=n_pca_components)\n    for i, embeddings_chunk in enumerate(dacc.flat_en_embeddings_iter(), 1):\n        try:\n            __clog(f\"   Processing chunk (#{i}) of {embeddings_chunk.shape=}\")\n            pca.partial_fit(embeddings_chunk)\n        except Exception as e:\n            # TODO: Save intermediate results?\n            if 'must be less or equal to the batch number of samples' in e.args[0]:\n                break  # it's the last chunk\n\n    # def compute_pca_projections():\n    #     for embeddings_chunk in dacc.flat_en_embeddings_iter():\n    #         yield pca.transform(embeddings_chunk)\n\n    # X = np.vstack(compute_pca_projections())\n\n    if save_name:\n        _clog(f\"Saving the planar embeddings to {save_name}\")\n        dacc.saves[save_name] = pca\n\n    return pca\n\n\ndef compute_and_save_pca_of_embeddings(\n    dacc=None,\n    verbose=1,\n    *,\n    pca_model='pca500.pkl',\n    pca_embeddings_name='pca500_embeddings.npy',\n):\n    dacc = dacc or mk_dacc()\n    _clog = partial(clog, int(verbose))\n\n    _clog(f\"Loading the PCA model {pca_model=}\")\n    pca = dacc.saves[pca_model]\n\n    _clog(\"Computing the PCA projections of the embeddings\")\n    X = pca.transform(dacc.embeddings_matrix)\n\n    _clog(f\"Saving the PCA embeddings to {pca_embeddings_name}\")\n    dacc = mk_dacc()  # to offload the dacc's data\n    dacc.saves[pca_embeddings_name] = X\n    return X\n\n\ndef compute_and_save_ncvis_planar_embeddings(\n    dacc=None,\n    verbose=1,\n    *,\n    embeddings_save_name='pca500_embeddings.npy',\n    ncvis_planar_embeddings_name='ncvis_planar_pca500_embeddings.npy',\n):\n    import ncvis\n\n    _clog = partial(clog, int(verbose))\n\n    _clog(f\"Loading the embeddings from {embeddings_save_name=}\")\n    dacc = dacc or mk_dacc()\n    X = dacc.saves[embeddings_save_name]\n\n    _clog(\"Computing the NCVis planar embeddings\")\n    vis = ncvis.NCVis(d=2, distance='cosine')\n    ncvis_planar_embeddings = vis.fit_transform(X)\n\n    _clog(f\"Saving the NCVis planar embeddings to {ncvis_planar_embeddings_name=}\")\n    dacc.saves[ncvis_planar_embeddings_name] = ncvis_planar_embeddings\n\n    return ncvis_planar_embeddings\n\n\ndef compute_and_save_planar_embeddings_with_incremental_pca(\n    dacc=None,\n    verbose=1,\n    *,\n    n_pca_components=500,\n    save_name='planar_embeddings_pca{pca_components}_{planar_projector}.npy',\n    planar_projector: Literal['umap', 'ncvis'] = 'ncvis',\n):\n\n    assert __import__(planar_projector), f\"No {planar_projector=} installed\"\n\n    dacc = dacc or mk_dacc()\n\n    save_name = save_name.format(\n        pca_components=n_pca_components, planar_projector=planar_projector\n    )\n\n    _clog = partial(clog, verbose)\n\n    # X = np.load(data_saves_join('flat_en_embeddings.npy'))\n\n    _clog(f\"Taking the PCA ({n_pca_components=}) of the embeddings...\")\n\n    from sklearn.decomposition import IncrementalPCA\n\n    pca = IncrementalPCA(n_components=n_pca_components)\n    for embeddings_chunk in dacc.flat_en_embeddings_iter():\n        pca.partial_fit(embeddings_chunk)\n\n    def compute_pca_projections():\n        for embeddings_chunk in dacc.flat_en_embeddings_iter():\n            yield pca.transform(embeddings_chunk)\n\n    X = np.vstack(compute_pca_projections())\n\n    _clog(f\"{len(X.shape)=}\")\n\n    _clog(\"And now, {planar_projector}... Crossing fingers\")\n\n    if planar_projector == 'umap':\n        import umap\n\n        planar_embeddings = umap.UMAP(\n            n_components=2, output_metric='cosine'\n        ).fit_transform(X)\n\n    elif planar_projector == 'ncvis':\n        import ncvis\n\n        planar_embeddings = ncvis.NCVis(d=2, distance='cosine').fit_transform(X)\n\n    _clog(\"deleting X\")\n    del X\n\n    if save_name:\n        _clog(f\"Saving the planar embeddings to {save_name}\")\n        try:\n            dacc.saves[save_name] = planar_embeddings\n        except:\n            # Just a backup in case the above fails\n            np.save(\n                data_saves_join(save_name),\n                planar_embeddings,\n            )\n    return planar_embeddings\n\n\ndef compute_and_save_planar_embeddings_light(\n    dacc=None,\n    verbose=1,\n    *,\n    n_pca_components=500,\n    save_name='planar_embeddings_pca{pca_components}_{planar_projector}.npy',\n    planar_projector: Literal['umap', 'ncvis'] = 'ncvis',\n    incremental_pca_chunk_size: int = None,\n):\n\n    assert __import__(planar_projector), f\"No {planar_projector=} installed\"\n\n    dacc = dacc or mk_dacc()\n\n    save_name = save_name.format(\n        pca_components=n_pca_components, planar_projector=planar_projector\n    )\n\n    _clog = partial(clog, verbose)\n\n    _clog(\"Loading embeddings\")\n    import numpy as np\n\n    X = concatenate_arrays(dacc.flat_en_embeddings.embeddings.values)\n    del dacc  # offloading data\n    # X = np.load(data_saves_join('flat_en_embeddings.npy'))\n\n    _clog(f\"Taking the PCA ({n_pca_components=}) of the embeddings {X.shape=}...\")\n\n    if not incremental_pca_chunk_size:\n        from sklearn.decomposition import PCA\n\n        X = PCA(n_components=n_pca_components).fit_transform(X)\n    else:\n        from sklearn.decomposition import IncrementalPCA\n\n        pca = IncrementalPCA(n_components=n_pca_components)\n        chk_size = int(incremental_pca_chunk_size)\n        n = len(X)\n        for i in range(0, n, chk_size):\n            # print progress on the same line\n            # _clog(f\"Rows {i}/{n}\")\n            X_chunk = X[i : (i + chk_size)]\n            pca.partial_fit(X_chunk)\n        X = pca.transform(X)\n\n    # _clog(\"Taking only part of them\")\n    # X = X[(X.shape[0] // 2):]\n\n    _clog(f\"{len(X.shape)=}\")\n\n    _clog(\"And now, {planar_projector}... Crossing fingers\")\n\n    if planar_projector == 'umap':\n        import umap\n\n        planar_embeddings = umap.UMAP(\n            n_components=2, output_metric='cosine'\n        ).fit_transform(X)\n\n    elif planar_projector == 'ncvis':\n        import ncvis\n\n        planar_embeddings = ncvis.NCVis(d=2, distance='cosine').fit_transform(X)\n\n    _clog(\"deleting X\")\n    del X\n\n    if save_name:\n        dacc = mk_dacc()\n        _clog(f\"Saving the planar embeddings to {save_name}\")\n        try:\n            dacc.saves[save_name] = planar_embeddings\n        except:\n            # Just a backup in case the above fails\n            np.save(\n                data_saves_join(save_name),\n                planar_embeddings,\n            )\n    return planar_embeddings\n\n\ndef compute_and_save_grouped_embeddings(dacc=None, verbose=1):\n    from imbed import umap_2d_embeddings\n\n    _clog = partial(clog, verbose)\n\n    _clog(\"Loading grouped embeddings\")\n    dacc = dacc or mk_dacc()\n    saves = dacc.saves\n\n    d = dacc.flat_en_conversation_grouped_embeddings\n\n    _clog(\"Making key-value store from them\")\n    d = {k: v['embeddings'] for k, v in d.iterrows()}\n    _clog(\"Deleting dacc to free up memory\")\n    del dacc\n\n    _clog(\"Computing planar embeddings\")\n    planar_embeddings = umap_2d_embeddings(d)\n\n    _clog(\"Saving the planar embeddings to planar_embeddings_grouped.pkl'\")\n    saves['planar_embeddings_grouped.pkl'] = planar_embeddings\n\n\ndef compute_and_save_embeddings_pca(\n    dacc=None,\n    verbose: int = 1,\n    *,\n    pca_components: int = 100,\n    chk_size: int = 50_000,\n    data_name: str = 'pca_model.pkl',\n):\n    import numpy as np\n\n    _clog = partial(clog, verbose)\n\n    dacc = dacc or mk_dacc()\n    saves = dacc.saves\n\n    _clog(\"Loading data...\")\n    X = dacc.flat_en_embeddings.embeddings\n    del dacc  # offloading data\n\n    _clog(\"Making a data matrix X from it...\")\n    X = np.vstack(X.tolist())\n    _clog(f\"{len(X)=}\")\n\n    from sklearn.decomposition import IncrementalPCA\n\n    pca = IncrementalPCA(n_components=pca_components)\n\n    # fit the PCA by chunks\n    chk_size = 10_000\n    n = len(X)\n    for i in range(0, n, chk_size):\n        # print progress on the same line\n        _clog(f\"Rows {i}/{n}\")\n        X_chunk = X[i : (i + chk_size)]\n        pca.partial_fit(X_chunk)\n\n    if data_name:\n        _clog(f\"Saving the PCA to {data_name}\")\n        saves[data_name] = pca\n\n    return pca\n\n\n# Note: DbScan slow (90mn for 3M rows of 100 columns)\ndef compute_and_save_dbscan(\n    dacc=None,\n    verbose: int = 1,\n    *,\n    eps=0.7,\n    min_samples=1000,\n    source_data_name='flat_en_embeddings_pca100.npy',\n    data_name='dbscan_0.7_1000_pca100.pkl',\n):\n    from sklearn.cluster import DBSCAN\n    from sklearn.preprocessing import StandardScaler\n\n    _clog = partial(clog, verbose)\n\n    _clog(\"Loading data...\")\n    dacc = dacc or mk_dacc()\n\n    X = dacc.saves[source_data_name]\n\n    _clog(\"Standardizing the data...\")\n    X = StandardScaler().fit_transform(X)\n\n    _clog(f\"Computing DBSCAN(eps={eps}, min_samples={min_samples})...\")\n    dbscan = DBSCAN(eps=eps, min_samples=min_samples).fit(X)\n\n    rootdir = getattr(dacc.saves, 'rootdir', '')\n    _clog(f\"Saving the DBSCAN to {os.path.join(rootdir, data_name)}\")\n    dacc.saves[data_name] = dbscan\n\n    return dbscan\n\n\ndef compute_and_save_kmeans(\n    dacc=None,\n    verbose: int = 1,\n    *,\n    X=None,\n    standardized_X=None,\n    n_clusters=7,\n    source_data_name='flat_en_embeddings_pca100.npy',\n    data_name='kmeans_{n_clusters}_clusters_indices.pkl',\n):\n    \"\"\"Compute the kmeans clusting and save it to the data store.\"\"\"\n    from sklearn.cluster import KMeans\n    from sklearn.preprocessing import StandardScaler\n\n    _clog = partial(clog, verbose)\n\n    dacc = dacc or mk_dacc()\n\n    if X is None:\n        _clog(\"Loading data...\")\n        X = dacc.saves[source_data_name]\n\n    if standardized_X is None:\n        assert X is not None, \"Need to provide X if standardized_X is not provided\"\n        _clog(\"Standardizing the data...\")\n        standardized_X = StandardScaler().fit_transform(X)\n\n    _clog(f\"Computing Kmeans(n_clusters={n_clusters})...\")\n    kmeans_clusters = KMeans(n_clusters=n_clusters).fit_predict(standardized_X)\n\n    if data_name is not None:\n        rootdir = getattr(dacc.saves, 'rootdir', '')\n        _clog(\n            f\"Saving the kmeans cluster indices to {os.path.join(rootdir, data_name)}\"\n        )\n        if '{n_clusters}' in data_name:\n            data_name = data_name.format(n_clusters=n_clusters)\n        dacc.saves[data_name] = kmeans_clusters\n\n    return kmeans_clusters\n\n\nif __name__ == '__main__':\n    from argh import dispatch_commands\n\n    dispatch_commands(\n        [\n            compute_and_save_embeddings,\n            compute_and_save_incremental_pca,\n            compute_and_save_planar_embeddings,\n            compute_and_save_planar_embeddings_with_incremental_pca,\n            compute_and_save_planar_embeddings_light,\n            compute_and_save_grouped_embeddings,\n            compute_and_save_embeddings_pca,\n            compute_and_save_dbscan,\n            compute_and_save_kmeans,\n            compute_and_save_ncvis_planar_embeddings,\n        ]\n    )\n",
  "num_of_data_files": 24,
  "tables_info": {
    "Icon\r": null,
    "pca_model.pkl": null,
    "planar_embeddings_first_forth.npy": null,
    "pca500.pkl": null,
    "kmeans_7_clusters_indices.pkl": null,
    "kmeans_14_clusters_indices.pkl": null,
    "kmeans_28_clusters_indices.pkl": null,
    "dbscan_7_kmeans.pkl": null,
    "planar_embeddings_pca500.npy": null,
    "ncvis_planar_pca500_embeddings.npy": null,
    "num_of_tokens.pkl": null,
    "planar_embeddings_of_grouped_conversations_with_metadata.tsv.zip": null,
    "planar_embeddings_grouped.tsv": {
      "shape": [
        766507,
        3
      ],
      "first_row": {
        "conversation_id": "00004b39283d4d9fabd2915cdf2f603e",
        "x": 4.826485,
        "y": 6.85775
      }
    },
    "conversation_paths.tsv": {
      "shape": [
        2068983,
        2
      ],
      "first_row": {
        "source": 833126,
        "target": 833127
      }
    },
    "planar_embeddings_grouped.pkl": null,
    "planar_embeddings_of_grouped_conversations_with_metadata.tsv": {
      "shape": [
        766507,
        19
      ],
      "first_row": {
        "conversation_id": "00004b39283d4d9fabd2915cdf2f603e",
        "x": 4.826485,
        "y": 6.85775,
        "model": "alpaca-13b",
        "turn": 1,
        "flagged": 0.0,
        "num_of_tokens": 46,
        "violence": 0.0,
        "sexual/minors": 0.0,
        "sexual": 0.0,
        "self-harm": 0.0,
        "self-harm/intent": 0.0,
        "hate/threatening": 0.0,
        "self-harm/instructions": 0.0,
        "harassment/threatening": 0.0,
        "violence/graphic": 0.0,
        "harassment": 0.0,
        "hate": 0.0,
        "id": "00004b39283d4d9fabd2915cdf2f603e"
      }
    },
    "planar_embeddings_for_a_forth_of_data.tsv.zip": null,
    "planar_embeddings_for_a_forth_of_data.parquet": {
      "shape": [
        708872,
        33
      ],
      "first_row": {
        "conversation_id": "33f01939a744455c869cb234afca47f1",
        "model": "wizardlm-13b",
        "turn": 1,
        "language": "English",
        "redacted": false,
        "content": "how can identity protection services help protect me against identity theft",
        "role": "user",
        "flagged": false,
        "harassment": false,
        "harassment/threatening": false,
        "hate": false,
        "hate/threatening": false,
        "self-harm": false,
        "self-harm/instructions": false,
        "self-harm/intent": false,
        "sexual": false,
        "sexual/minors": false,
        "violence": false,
        "violence/graphic": false,
        "category_scores.harassment": 9.212334e-07,
        "category_scores.harassment/threatening": 3.6271535e-07,
        "category_scores.hate": 8.254962e-07,
        "category_scores.hate/threatening": 1.331843e-08,
        "category_scores.self-harm": 1.9257865e-07,
        "category_scores.self-harm/instructions": 6.5028324e-08,
        "category_scores.self-harm/intent": 2.7525962e-07,
        "category_scores.sexual": 2.564017e-06,
        "category_scores.sexual/minors": 4.523274e-07,
        "category_scores.violence": 2.2942773e-05,
        "category_scores.violence/graphic": 1.9713439e-06,
        "num_of_tokens": 11,
        "x": -0.016079820692539215,
        "y": 0.27986255288124084
      }
    },
    "planar_embeddings_for_a_forth_of_data.tsv": {
      "shape": [
        708874,
        33
      ],
      "first_row": {
        "conversation_id": "33f01939a744455c869cb234afca47f1",
        "model": "wizardlm-13b",
        "turn": 1,
        "language": "English",
        "redacted": false,
        "content": "how can identity protection services help protect me against identity theft",
        "role": "user",
        "flagged": false,
        "harassment": false,
        "harassment/threatening": false,
        "hate": false,
        "hate/threatening": false,
        "self-harm": false,
        "self-harm/instructions": false,
        "self-harm/intent": false,
        "sexual": false,
        "sexual/minors": false,
        "violence": false,
        "violence/graphic": false,
        "category_scores.harassment": 9.212334e-07,
        "category_scores.harassment/threatening": 3.6271535e-07,
        "category_scores.hate": 8.254962e-07,
        "category_scores.hate/threatening": 1.331843e-08,
        "category_scores.self-harm": 1.9257865e-07,
        "category_scores.self-harm/instructions": 6.5028324e-08,
        "category_scores.self-harm/intent": 2.7525962e-07,
        "category_scores.sexual": 2.564017e-06,
        "category_scores.sexual/minors": 4.523274e-07,
        "category_scores.violence": 2.2942773e-05,
        "category_scores.violence/graphic": 1.9713439e-06,
        "num_of_tokens": 11.0,
        "x": -0.01607982,
        "y": 0.27986255
      }
    },
    "flat_en.parquet": {
      "shape": [
        2996946,
        31
      ],
      "first_row": {
        "conversation_id": "33f01939a744455c869cb234afca47f1",
        "model": "wizardlm-13b",
        "turn": 1,
        "language": "English",
        "redacted": false,
        "content": "how can identity protection services help protect me against identity theft",
        "role": "user",
        "flagged": false,
        "harassment": false,
        "harassment/threatening": false,
        "hate": false,
        "hate/threatening": false,
        "self-harm": false,
        "self-harm/instructions": false,
        "self-harm/intent": false,
        "sexual": false,
        "sexual/minors": false,
        "violence": false,
        "violence/graphic": false,
        "category_scores.harassment": 9.212334e-07,
        "category_scores.harassment/threatening": 3.6271535e-07,
        "category_scores.hate": 8.254962e-07,
        "category_scores.hate/threatening": 1.331843e-08,
        "category_scores.self-harm": 1.9257865e-07,
        "category_scores.self-harm/instructions": 6.5028324e-08,
        "category_scores.self-harm/intent": 2.7525962e-07,
        "category_scores.sexual": 2.564017e-06,
        "category_scores.sexual/minors": 4.523274e-07,
        "category_scores.violence": 2.2942773e-05,
        "category_scores.violence/graphic": 1.9713439e-06,
        "num_of_tokens": 11
      }
    },
    "lmsys_with_planar_embeddings_pca500.parquet": {
      "shape": [
        2835490,
        38
      ],
      "first_row": {
        "conversation_id": "33f01939a744455c869cb234afca47f1",
        "model": "wizardlm-13b",
        "turn": 1,
        "language": "English",
        "redacted": false,
        "content": "how can identity protection services help protect me against identity theft",
        "role": "user",
        "flagged": false,
        "harassment": false,
        "harassment/threatening": false,
        "hate": false,
        "hate/threatening": false,
        "self-harm": false,
        "self-harm/instructions": false,
        "self-harm/intent": false,
        "sexual": false,
        "sexual/minors": false,
        "violence": false,
        "violence/graphic": false,
        "category_scores.harassment": 9.212334e-07,
        "category_scores.harassment/threatening": 3.6271535e-07,
        "category_scores.hate": 8.254962e-07,
        "category_scores.hate/threatening": 1.331843e-08,
        "category_scores.self-harm": 1.9257865e-07,
        "category_scores.self-harm/instructions": 6.5028324e-08,
        "category_scores.self-harm/intent": 2.7525962e-07,
        "category_scores.sexual": 2.564017e-06,
        "category_scores.sexual/minors": 4.523274e-07,
        "category_scores.violence": 2.2942773e-05,
        "category_scores.violence/graphic": 1.9713439e-06,
        "num_of_tokens": 11,
        "x_umap": 7.932803630828857,
        "y_umap": -1.7505877017974854,
        "clusters_07": 4,
        "clusters_14": 4,
        "clusters_28": 15,
        "x_ncvis": -13.98167896270752,
        "y_ncvis": -5.530224800109863
      }
    },
    "flat_en_embeddings_pca100.npy": null,
    "flat_en_conversation_grouped_embeddings.parquet": {
      "shape": [
        766507,
        2
      ],
      "first_row": {
        "num_of_tokens": 46,
        "embeddings": [
          0.01601533917710185,
          0.004042537766508758,
          -0.0019018570892512798,
          -0.00785744865424931,
          0.01343825669027865,
          -0.07119984552264214,
          -0.012419397826306522,
          0.02581209037452936,
          0.0017556226812303066,
          0.015432609245181084,
          0.013429907849058509,
          -0.04351433366537094,
          0.0058852024376392365,
          0.02475104760378599,
          0.0030629721004515886,
          0.04482006095349789,
          0.011216365150175989,
          -0.04621616564691067,
          0.026155509054660797,
          0.021425195038318634,
          -0.001778226695023477,
          0.013216552091762424,
          0.0035655280080391094,
          -0.012721566017717123,
          0.0030451848870143294,
          0.031414021737873554,
          0.0025617949722800404,
          0.009409754537045956,
          0.004632662050426006,
          0.027918891049921513,
          -0.00019852141849696636,
          -0.020351529587060213,
          -0.04495269991457462,
          -0.049324776977300644,
          0.03398117609322071,
          -0.0015118001028895378,
          0.025551392696797848,
          -0.02440590877085924,
          0.047655023634433746,
          -0.011295549105852842,
          0.010941054672002792,
          0.016627566888928413,
          0.03588702715933323,
          0.00473414734005928,
          0.01750269252806902,
          0.03307529352605343,
          0.04007789120078087,
          -0.005709842895157635,
          0.05498227849602699,
          0.02495753765106201,
          -0.0539267398416996,
          0.0013108369894325733,
          0.026489668525755405,
          -0.028090141713619232,
          -0.045761777088046074,
          0.025281897746026516,
          -0.06157143972814083,
          -0.016278487164527178,
          -0.016839259304106236,
          -0.0017376589530613273,
          0.011740174610167742,
          -0.027827602345496416,
          0.0671484861522913,
          0.009734471095725894,
          -0.049874525517225266,
          -0.010688204783946276,
          -0.02373309852555394,
          -0.020656344713643193,
          -0.03710385970771313,
          -0.020889277569949627,
          0.017015127930790186,
          -0.03190648648887873,
          -0.021101259044371545,
          -0.025975264608860016,
          -0.03627112880349159,
          0.023716125637292862,
          -0.033949749544262886,
          -0.014312466606497765,
          0.020162402652204037,
          -0.01296509918756783,
          -0.02653017919510603,
          0.020202080719172955,
          -0.03648829646408558,
          0.04353537783026695,
          -0.08274845406413078,
          0.008811745443381369,
          0.007372546475380659,
          0.023246873170137405,
          -0.10011197626590729,
          -0.02269042655825615,
          0.0037585272220894694,
          0.0030153648694977164,
          0.027349487878382206,
          -0.02676091669127345,
          0.013439150294288993,
          0.031678445637226105,
          -0.010495576309040189,
          0.06397106871008873,
          0.03145685326308012,
          -0.010956472717225552,
          -0.05272272229194641,
          0.03297040890902281,
          0.010010756785050035,
          -0.014767457265406847,
          0.06848477944731712,
          0.04323743283748627,
          0.018435179721564054,
          -0.02316995244473219,
          0.04322943277657032,
          0.03604601416736841,
          -0.07816436141729355,
          -0.02396541927009821,
          0.011439047288149595,
          0.021303514949977398,
          -0.02267636451870203,
          -0.06698373332619667,
          0.0505972933024168,
          -0.018474450334906578,
          -0.01647718291496858,
          -0.03247586917132139,
          -0.008994769770652056,
          -0.007580201490782201,
          0.007282216509338468,
          0.00803686399012804,
          0.05461547710001469,
          -0.0015892952214926481,
          -0.032046481035649776,
          0.00839179684408009,
          0.0140606127679348,
          -0.05321845784783363,
          0.02593664824962616,
          -0.013540755375288427,
          0.013079196854960173,
          -0.03423409350216389,
          -0.04849322885274887,
          -0.009190019685775042,
          0.010683024767786264,
          -0.011017368640750647,
          -0.006560857291333377,
          -0.031236170791089535,
          0.026016933377832174,
          -0.01572545780800283,
          0.012256567599251866,
          0.013981364667415619,
          -0.005826821899972856,
          0.009746857453137636,
          0.02776753343641758,
          0.010525587073061615,
          0.011850234819576144,
          0.004360944032669067,
          -0.01772946957498789,
          -0.02561757806688547,
          -0.0413263151422143,
          -0.002906081033870578,
          -0.013887674547731876,
          -0.029019885696470737,
          0.04056663066148758,
          0.0097886131843552,
          -0.009978318586945534,
          0.022428192663937807,
          0.048123689368367195,
          0.016326156677678227,
          0.008598412270657718,
          -0.0028742742724716663,
          -0.04364045336842537,
          0.01022042566910386,
          0.008051451412029564,
          -0.07031376659870148,
          -0.01531672989949584,
          0.08053388074040413,
          -0.009318340802565217,
          0.018204044550657272,
          0.04598546214401722,
          -0.03394961357116699,
          -0.005167220253497362,
          0.010793982073664665,
          0.059502528980374336,
          -0.004461989417904988,
          -0.007611785316839814,
          0.01238169614225626,
          0.018948988523334265,
          0.021779607981443405,
          -0.03229797538369894,
          0.002501370618119836,
          -0.010026003699749708,
          -0.02491407422348857,
          0.032959953881800175,
          -0.050628069788217545,
          -0.014724704204127192,
          0.01050573168322444,
          -0.07287176698446274,
          -0.02161453478038311,
          -0.0403797859326005,
          0.013373012538067997,
          0.04350629262626171,
          -0.014086859999224544,
          0.034321931190788746,
          0.037032606080174446,
          0.0075422656736918725,
          0.0008292943239212036,
          0.02612826321274042,
          0.0007756870872981381,
          -0.009579677833244205,
          -0.0028812690870836377,
          0.008734961971640587,
          0.02425345778465271,
          -0.03329630009829998,
          0.015866867383010685,
          -0.019417820498347282,
          -0.017429082188755274,
          -0.010566604789346457,
          -0.010911601828411222,
          -0.028771827928721905,
          -0.014164261985570192,
          -0.006793136475607753,
          -0.05709868110716343,
          -0.015422745607793331,
          0.000576406717300415,
          -0.0136265829205513,
          0.07559500262141228,
          0.002235360676422715,
          0.021615892183035612,
          0.04817300662398338,
          -0.023492591455578804,
          0.012119890889152884,
          -0.005730555014451966,
          0.006884874543175101,
          -0.051269376650452614,
          -0.010708889923989773,
          -0.024296365678310394,
          0.0690175537019968,
          0.05303549766540527,
          -0.02708774246275425,
          -0.004164387588389218,
          0.012814962537959218,
          0.0014904867857694626,
          -0.02531304582953453,
          0.015345255378633738,
          -0.010451397392898798,
          -0.010337623534724116,
          -0.01097394758835435,
          -0.0035711810924112797,
          -0.056768035516142845,
          -0.05722951330244541,
          -0.04540085233747959,
          0.01789531111717224,
          -0.03438284248113632,
          -0.04060985893011093,
          0.013517386745661497,
          -0.01950882561504841,
          0.10856666788458824,
          0.043459486216306686,
          -0.011625252198427916,
          -0.007155062630772591,
          0.007713226368650794,
          -0.001371786929666996,
          0.024636924266815186,
          -0.00921168364584446,
          0.00855980790220201,
          0.004424513143021613,
          0.006976691583986394,
          0.00711302924901247,
          0.04203568212687969,
          0.011258736747549847,
          0.01073496334720403,
          0.0024746934650465846,
          -0.028880457393825054,
          0.03642224706709385,
          2.2227875888347626e-05,
          0.013444000855088234,
          -0.024273390881717205,
          0.009758890606462955,
          0.0018423902802169323,
          0.014037410262972116,
          -0.041868915781378746,
          0.00032357918098568916,
          -0.056519484147429466,
          -0.003331979736685753,
          -0.0029897625790908933,
          -0.02867961674928665,
          0.02383539453148842,
          0.028610456734895706,
          -0.03279529884457588,
          0.024297449737787247,
          0.030194243416190147,
          0.013531218748539686,
          -0.005360058392398059,
          0.004762969561852515,
          -0.018873540684580803,
          -0.03258539363741875,
          0.024802228435873985,
          -0.06265705451369286,
          0.0018574046553112566,
          0.020126564661040902,
          0.02034212520084111,
          -0.02594341989606619,
          -0.011335568968206644,
          0.004690291825681925,
          -0.02547943126410246,
          0.00886473711580038,
          -0.01576878735795617,
          -0.03790563717484474,
          0.044225066900253296,
          0.042799415066838264,
          -0.008793523884378374,
          -0.010479440505150706,
          -0.01282555004581809,
          0.027939033694565296,
          -0.013849965296685696,
          -0.02548952680081129,
          -0.004792015242855996,
          0.0502022560685873,
          0.039930589497089386,
          -0.05641738884150982,
          0.008507471298798919,
          -0.017003733199089766,
          -0.022382006980478764,
          -0.04137011803686619,
          -0.03060089237987995,
          -0.04351891204714775,
          0.022127279546111822,
          0.00011815797188319266,
          0.05661853216588497,
          -0.006243407435249537,
          0.012559973838506266,
          -0.03742794319987297,
          0.004472563625313342,
          0.05710666440427303,
          0.010040756831585895,
          0.004432318324688822,
          -0.06837542727589607,
          0.02681783866137266,
          -0.03731564246118069,
          0.0301328394562006,
          0.0001857713796198368,
          -0.03149841073900461,
          0.029486932791769505,
          0.01796717196702957,
          0.011373473796993494,
          -0.003942220006138086,
          -0.0067517312709242105,
          -0.05258637294173241,
          0.004371248185634613,
          0.024051295593380928,
          -0.015261529944837093,
          0.008305331342853606,
          0.035830263048410416,
          0.05960366874933243,
          0.0010849150130525231,
          0.027421596460044384,
          -0.008339496329426765,
          -0.003546684980392456,
          -0.007820238824933767,
          0.05207335948944092,
          0.009566307999193668,
          0.015115391463041306,
          -0.04722616821527481,
          -0.026583487167954445,
          -0.007131435093469918,
          -0.0045102216536179185,
          0.03176890220493078,
          -0.01821271236985922,
          -0.0014680123276775703,
          0.031061346642673016,
          -0.04102415591478348,
          -0.021130187436938286,
          0.02540416643023491,
          -0.028531333431601524,
          0.028530786745250225,
          -0.006777942995540798,
          0.012519714655354619,
          -0.001468548784032464,
          -0.023379909805953503,
          -0.04241250455379486,
          -0.0412619486451149,
          -0.05588374845683575,
          -0.006734601687639952,
          -0.02031797030940652,
          -0.024568436667323112,
          -0.029412941075861454,
          -0.027029317803680897,
          0.0158301149494946,
          0.02971668727695942,
          -0.014404137851670384,
          0.03241144027560949,
          0.012332268059253693,
          -0.01629156363196671,
          -0.026527520269155502,
          -0.029396936297416687,
          -0.01180105796083808,
          -0.006877476058434695,
          -0.018587577622383833,
          0.013662098441272974,
          0.011962642893195152,
          0.02298354171216488,
          0.013540987391024828,
          -0.0041573160560801625,
          0.041514186188578606,
          -0.012394303921610117,
          0.037717957980930805,
          0.0013270820491015911,
          0.03714948333799839,
          0.007061479613184929,
          0.04731155186891556,
          0.018944434821605682,
          -0.022922979667782784,
          0.0026650913059711456,
          -0.013274500146508217,
          -0.031721943989396095,
          0.01595633919350803,
          -0.022271183785051107,
          0.0017266609356738627,
          0.013482796959578991,
          -0.010147727560251951,
          -0.07321719452738762,
          -0.049630205146968365,
          0.014626450138166547,
          0.013909576227888465,
          0.0020276054565329105,
          0.0342848626896739,
          -0.014279202645411715,
          -0.018974420381709933,
          0.02431315276771784,
          8.822698146104813e-05,
          -0.011705551762133837,
          0.025939615443348885,
          -0.0010785823687911034,
          -0.026237825863063335,
          -0.036345349624753,
          -0.03615839406847954,
          -0.0349081065505743,
          0.004612612538039684,
          0.0271006403490901,
          0.0005473920609802008,
          -0.015204762574285269,
          -0.021521683782339096,
          0.031565611250698566,
          -0.020271281711757183,
          0.02177386824041605,
          -0.007756322622299194,
          -0.027608439326286316,
          0.010229754610918462,
          -0.03938305377960205,
          0.0016447016969323158,
          0.03434598073363304,
          -0.02055694116279483,
          -0.002492747502401471,
          -0.05184577405452728,
          -0.04434259235858917,
          -0.06434638611972332,
          0.012219492346048355,
          0.012333427555859089,
          0.0031957151368260384,
          -0.018720918335020542,
          -0.004530576290562749,
          0.022996515966951847,
          0.03514397796243429,
          -0.01242669066414237,
          0.0100955719826743,
          -0.005159058127901517,
          0.012607407290488482,
          -0.017183122225105762,
          0.00854017527308315,
          0.04954964108765125,
          0.01463834336027503,
          0.00434165692422539,
          -0.028969790786504745,
          0.013055157847702503,
          0.02198657486587763,
          -0.021959762554615736,
          0.03443358652293682,
          -0.01652515633031726,
          0.04113387130200863,
          -0.005059370421804488,
          -0.020681914873421192,
          0.032099829986691475,
          0.027448668144643307,
          -0.009872658178210258,
          -0.026350080966949463,
          0.009609583299607038,
          0.011221558088436723,
          0.019395339768379927,
          -0.0011835998739115894,
          0.020049589220434427,
          0.03540462162345648,
          0.04367716796696186,
          0.02486077044159174,
          -0.0687263011932373,
          0.01659942138940096,
          -0.025853972882032394,
          0.009887833148241043,
          0.011299240926746279,
          0.03114683460444212,
          -0.01255407789722085,
          -0.011604240164160728,
          -0.04239646065980196,
          -0.03346103057265282,
          0.0011822254600701854,
          0.06350540928542614,
          0.013323314022272825,
          0.012727020890451968,
          -0.012795067392289639,
          -0.028306903317570686,
          -0.014940867200493813,
          0.01805979572236538,
          -0.00782694376539439,
          0.02085690014064312,
          -0.013841299340128899,
          -0.02809365838766098,
          0.024890047498047352,
          -0.015673465561121702,
          0.02263146173208952,
          0.0012756992218783125,
          0.02238026913255453,
          -0.021850178949534893,
          -0.013970527797937393,
          -0.03897839970886707,
          0.0346586387604475,
          0.0013084521051496267,
          -0.002880510874092579,
          -0.02535458467900753,
          0.0009789061732590199,
          -0.029783678241074085,
          0.0258534736931324,
          -0.011350416345521808,
          0.02863781526684761,
          -0.029200700111687183,
          -0.005502831365447491,
          -0.011768292635679245,
          -0.019959041848778725,
          -0.011495976243168116,
          -0.01678376505151391,
          0.011831509415060282,
          0.007660760311409831,
          -0.05097886733710766,
          -0.011916771298274398,
          -0.005646000150591135,
          -0.012409092858433723,
          -0.03330350201576948,
          0.007417120737954974,
          -0.034512235783040524,
          0.0006086835637688637,
          -0.00993990059942007,
          0.018653525970876217,
          -0.02029641531407833,
          -0.05283169262111187,
          0.020512056536972523,
          0.0042916564270854,
          -0.026648562401533127,
          -0.012218730058521032,
          0.03171333018690348,
          -0.025167763233184814,
          0.013893684837967157,
          0.006458217510953546,
          -0.0006149611435830593,
          0.02889779582619667,
          0.027155116200447083,
          0.019541830755770206,
          0.0007519095379393548,
          0.02766005229204893,
          0.0004843887290917337,
          -0.0032521430402994156,
          0.006232226500287652,
          0.03147124219685793,
          0.024648412596434355,
          0.034393833950161934,
          -0.0013687688624486327,
          -0.030182416550815105,
          0.018005853984504938,
          0.004217271110974252,
          0.0036022746935486794,
          -0.002568754251115024,
          0.0066148970945505425,
          -0.05276530794799328,
          -0.00145441060885787,
          0.029063688591122627,
          0.050109367817640305,
          -0.026643223129212856,
          0.02344897948205471,
          -0.0005524737061932683,
          -0.02304957527667284,
          -0.033776464872062206,
          -0.012192364782094955,
          -0.01969702821224928,
          -0.056406060233712196,
          0.004768251441419125,
          -0.005905005615204573,
          -0.02930448390543461,
          0.04110841080546379,
          0.026386333629488945,
          -0.015687371604144573,
          -0.032876020297408104,
          -0.02011299319565296,
          0.01417932752519846,
          -0.011953655164688826,
          0.024794801138341427,
          -0.002398706041276455,
          0.013988392194733024,
          -0.01907766330987215,
          -0.008813921827822924,
          -0.03388306125998497,
          -0.009543489664793015,
          -0.031026535667479038,
          -0.014089290983974934,
          0.012078137835487723,
          0.044858213514089584,
          0.02768191695213318,
          0.001769484020769596,
          0.012868817429989576,
          -0.003443117981078103,
          0.005253024748526514,
          -0.01552064553834498,
          -0.02622839715331793,
          -0.038651613518595695,
          0.013305887579917908,
          0.0008822057861834764,
          0.016724669374525547,
          -0.013597450219094753,
          0.02919461764395237,
          -0.062256067991256714,
          -0.0029269515071064234,
          0.0328091150149703,
          -0.016132946126163006,
          0.023320895619690418,
          -0.011131526436656713,
          -0.0079858165117912,
          -0.023197530768811703,
          -0.018424639478325844,
          0.004016063641756773,
          -0.015728323254734278,
          0.02119771670550108,
          -0.0016289567574858665,
          0.04722445830702782,
          0.031310657039284706,
          0.006546576041728258,
          -0.034901337698102,
          -0.005306889885105193,
          -0.019515851978212595,
          -0.010851179249584675,
          0.01384433452039957,
          0.016842236276715994,
          -0.023704243823885918,
          -0.007219665334559977,
          0.007627504062838852,
          -0.014266266487538815,
          0.011396461632102728,
          0.0025944984517991543,
          0.014814629539614543,
          -0.013993142172694206,
          0.0035364922950975597,
          0.006929078372195363,
          -0.022540047764778137,
          0.013760296278633177,
          0.007642613258212805,
          -0.008628915747976862,
          0.008378015365451574,
          0.013890785165131092,
          -0.00999525305815041,
          -0.07030457258224487,
          0.03784131910651922,
          0.008468888234347105,
          0.05218401923775673,
          -0.02376707550138235,
          -0.016202927101403475,
          -0.01700927596539259,
          0.00497676560189575,
          -0.00885600270703435,
          0.008375630131922662,
          -0.055355774238705635,
          -0.00019385607447475195,
          -0.0620244350284338,
          0.004664529347792268,
          0.006165491999126971,
          0.009523324202746153,
          -0.01657878514379263,
          0.03204323071986437,
          0.01811981527134776,
          -0.02346956916153431,
          -0.010484340251423419,
          0.01995202526450157,
          -0.027882007881999016,
          0.034539058804512024,
          0.003858687821775675,
          -0.01829087408259511,
          -0.024248515255749226,
          -0.002961434132885188,
          -0.017610381357371807,
          0.026213187724351883,
          0.016911490354686975,
          -0.023241665214300156,
          -0.00779433804564178,
          0.012987516820430756,
          0.030571614392101765,
          -0.012658300576731563,
          0.0018298964714631438,
          0.04566831886768341,
          -0.007258840603753924,
          -0.004933944146614522,
          -0.010525284335017204,
          -0.018798985285684466,
          0.010512261185795069,
          -0.0019539392087608576,
          -0.001802033861167729,
          -0.02175548393279314,
          -0.0006165128434076905,
          0.03230689745396376,
          -0.022144281305372715,
          0.013555649435147643,
          -0.003570156914065592,
          -0.017037278041243553,
          0.0077461067121475935,
          0.017349349334836006,
          -0.000690520741045475,
          -0.016328591387718916,
          0.017950499430298805,
          -0.00045796437188982964,
          0.020557970739901066,
          -0.020410205237567425,
          0.013866938184946775,
          0.006436620955355465,
          -0.013759715016931295,
          0.003960214264225215,
          -0.018652270548045635,
          -0.04658211022615433,
          -0.01168833952397108,
          0.025663251988589764,
          -0.0350188622251153,
          -0.027777312323451042,
          -0.00973587273620069,
          -0.055484553799033165,
          0.001908408146846341,
          -0.03201528172940016,
          0.016491258516907692,
          0.014383391011506319,
          -0.00979499303502962,
          0.019154337234795094,
          0.016827957704663277,
          0.01844008732587099,
          0.010123924352228642,
          -0.006786935729905963,
          -0.02998662181198597,
          0.023309908341616392,
          0.012978189392015338,
          0.03221452888101339,
          -0.019037025049328804,
          0.014473116490989923,
          -0.006348836701363325,
          0.015982670709490776,
          -0.01031404035165906,
          0.025249682366847992,
          0.001925640506669879,
          0.009861442726105452,
          -0.00043186964467167854,
          -0.04461110569536686,
          -0.034467446617782116,
          -0.00954655953682959,
          0.011960400268435478,
          0.007003856007941067,
          -0.022917428985238075,
          0.01969203120097518,
          0.038489220663905144,
          0.027379192411899567,
          -0.017072364687919617,
          0.01234383275732398,
          -0.014901104499585927,
          0.027533493004739285,
          -0.02371423225849867,
          0.03674321435391903,
          -0.038639770820736885,
          0.0013399575254879892,
          -0.012568815611302853,
          0.022821802645921707,
          0.01716743572615087,
          -0.03761803358793259,
          -0.024075054563581944,
          0.02783035160973668,
          0.02969158999621868,
          -0.006763285957276821,
          0.00638926331885159,
          -0.008724141400307417,
          0.012599609792232513,
          -0.005055392044596374,
          0.04536191560328007,
          0.006306129042059183,
          0.0007105198601493612,
          -0.026894147507846355,
          -0.013507653027772903,
          0.0053457086032722145,
          -0.007680789567530155,
          -0.027307165786623955,
          -0.021731900982558727,
          0.0005813604220747948,
          -0.0026004078099504113,
          -0.017302495893090963,
          -0.032987783662974834,
          0.03078524675220251,
          -0.06129813566803932,
          -0.05120198428630829,
          0.0243315938860178,
          0.021453483030200005,
          0.018328395672142506,
          -0.006567645352333784,
          0.008745806131628342,
          -0.004775180364958942,
          0.008933505276218057,
          0.03177224937826395,
          0.030535226687788963,
          -0.028786693699657917,
          0.020694260485470295,
          0.01750773098319769,
          0.023556754924356937,
          0.001968554628547281,
          0.013096400070935488,
          -0.02295835968106985,
          -0.026661165058612823,
          -0.043793097138404846,
          0.024663960095494986,
          0.011908788816072047,
          0.017448426224291325,
          0.008650896605104208,
          -0.029737538658082485,
          -0.02017285255715251,
          -0.019674253650009632,
          0.0011358438059687614,
          -0.04032881744205952,
          0.004965011961758137,
          0.027537943795323372,
          0.0007311683148145676,
          0.012898880173452199,
          0.02586899045854807,
          0.006246263743378222,
          0.028558597899973392,
          0.0347281601279974,
          0.012937850784510374,
          -0.017957165837287903,
          0.013119856361299753,
          0.015589385526254773,
          0.016173942480236292,
          -0.007185955299064517,
          -0.022209965623915195,
          -0.005270179943181574,
          -0.0034597625490278006,
          0.03009468223899603,
          0.023144081234931946,
          -0.008291944162920117,
          -0.005939239636063576,
          -0.0008193153189495206,
          0.029574304819107056,
          -0.022428320720791817,
          -0.035199983045458794,
          -0.020156044512987137,
          -0.010488132480531931,
          -0.008114598924294114,
          -0.01949233654886484,
          -0.04248904064297676,
          -0.01906622853130102,
          -0.003501335682813078,
          -0.062176868319511414,
          -0.0032119283569045365,
          0.04436981678009033,
          -0.01298283040523529,
          -0.028308619745075703,
          -0.029473264701664448,
          0.01751065580174327,
          0.023523743264377117,
          -0.05135349929332733,
          -0.032818639650940895,
          0.047164956107735634,
          0.024028364568948746,
          0.0032835955498740077,
          -0.029893908649683,
          0.012355692684650421,
          -0.008554836036637425,
          -0.018998892977833748,
          0.012342706322669983,
          -0.023745269514620304,
          -0.018910431303083897,
          -0.031192710623145103,
          -0.03398364782333374,
          -0.017068699933588505,
          0.0019235439540352672,
          -0.006971401744522154,
          -0.013558974955230951,
          0.04115797393023968,
          0.004301902954466641,
          -0.007179915904998779,
          0.056572869420051575,
          0.010633643250912428,
          -0.007013892485701945,
          -0.0023758677416481078,
          -0.016514013521373272,
          -0.04269170481711626,
          -0.006700681886286475,
          -0.010023312643170357,
          -0.014991448260843754,
          0.022301504388451576,
          -0.023697741329669952,
          0.011394955159630626,
          0.00397642666939646,
          0.006231855251826346,
          -0.014785385224968195,
          -0.021943628787994385,
          0.016820971854031086,
          -0.02367497980594635,
          -0.031102879904210567,
          -0.009723353665322065,
          0.015188311226665974,
          0.013966399361379445,
          -0.03892041556537151,
          0.0027330718003213406,
          -0.03857072442770004,
          0.007039931952022016,
          -0.028655298054218292,
          0.011067549814470112,
          0.010715899406932294,
          0.000816253712400794,
          0.061841169372200966,
          0.014732372015714645,
          -0.026653260923922062,
          0.005205018795095384,
          0.014314081752672791,
          0.021623403765261173,
          -0.017724170815199614,
          0.0013765365583822131,
          0.022998454980552197,
          -0.008086511166766286,
          -0.012139200698584318,
          -0.007960133720189333,
          -0.01043820334598422,
          0.014285535551607609,
          -0.01598763559013605,
          0.02765598800033331,
          -0.02218844648450613,
          0.005282806232571602,
          0.04527800343930721,
          -0.006291119381785393,
          0.006315651582553983,
          0.006664825603365898,
          0.000858721905387938,
          0.00834518251940608,
          0.00021560280583798885,
          0.020893649198114872,
          -0.014781022910028696,
          0.029453016817569733,
          -0.007384544122032821,
          -0.004280993016436696,
          0.008730803383514285,
          0.006984545849263668,
          0.0012791543267667294,
          -0.05039149336516857,
          0.0011068573858210584,
          -0.015938839875161648,
          -0.008702947059646249,
          -0.0073090288788080215,
          0.01864395197480917,
          -0.017163967713713646,
          0.06159990094602108,
          -0.03522177133709192,
          0.0038000098429620266,
          0.027358555234968662,
          -0.029263035394251347,
          0.049850838258862495,
          -0.02172499243170023,
          -0.010211054235696793,
          -0.010058120591565967,
          0.0314298951998353,
          -0.041655875742435455,
          -0.03433577436953783,
          0.027712791226804256,
          0.013016704935580492,
          -0.013923361897468567,
          0.022749063558876514,
          -0.002158978400984779,
          0.0023467193823307753,
          0.057011302560567856,
          -0.003501209896057844,
          -0.011772684985771775,
          -0.027516652829945087,
          0.010229803971014917,
          -0.00030181417241692543,
          0.03347405232489109,
          -0.019402952399104834,
          -0.01603841269388795,
          0.01004224200733006,
          -0.021617271471768618,
          0.02850140817463398,
          0.012079593958333135,
          0.01412469893693924,
          0.024418048560619354,
          0.0078284228220582,
          -0.01295304112136364,
          0.0030252111610025167,
          0.01530769793316722,
          -0.040251919999718666,
          0.0015262151136994362,
          0.004882925597485155,
          0.021171595435589552,
          -0.045756835490465164,
          -0.054755473509430885,
          0.029457353055477142,
          -0.01401318795979023,
          -0.03216819278895855,
          -0.01788082392886281,
          -0.003238283097743988,
          -0.012212192639708519,
          -0.02378801815211773,
          0.007954002125188708,
          -0.00678054615855217,
          -0.014448021538555622,
          0.0012709369184449315,
          0.015532951802015305,
          0.01610043691471219,
          0.010811201762408018,
          -0.00011929927859455347,
          0.04235528036952019,
          -0.05035495199263096,
          -0.019123349338769913,
          0.021233513951301575,
          0.004336332727689296,
          -0.030070537701249123,
          0.03338740114122629,
          -0.024952632375061512,
          -0.022561644203960896,
          -0.0015123370103538036,
          0.006553662242367864,
          0.06209257431328297,
          0.008444039267487824,
          0.022057391703128815,
          0.008188918589439709,
          0.01764072384685278,
          -0.005406143260188401,
          0.017084342427551746,
          0.009931198321282864,
          -0.008202031953260303,
          0.005192597629502416,
          0.010109092108905315,
          0.011544001521542668,
          0.039799319580197334,
          0.0071757936384528875,
          0.00011709635145962238,
          -0.02180746104568243,
          -0.016087651252746582,
          -0.01391739072278142,
          0.003646994009613991,
          0.02248399145901203,
          -0.01437291200272739,
          -0.008621421118732542,
          -0.0037543621729128063,
          0.05811475031077862,
          0.012056308332830667,
          -0.003538205986842513,
          -0.009372907923534513,
          0.03719706740230322,
          0.036103565245866776,
          0.01393987238407135,
          -0.005904716090299189,
          0.005979710491374135,
          0.015171130187809467,
          -0.00391650665551424,
          -0.02608876023441553,
          -0.010795721784234047,
          -0.025991268921643496,
          0.026062200777232647,
          0.008730135159566998,
          -0.0037599917268380523,
          -0.013242030516266823,
          0.01596471620723605,
          -0.0009156202431768179,
          0.0026450958102941513,
          -0.007198764244094491,
          -0.022259890101850033,
          -0.007961389375850558,
          0.010562737239524722,
          -0.008014782331883907,
          -0.04141395725309849,
          0.012359530199319124,
          0.003337947651743889,
          -0.009894052753224969,
          0.020604481920599937,
          -0.010383621323853731,
          0.02348706778138876,
          0.02284547220915556,
          0.009283502819016576,
          -0.04092635679990053,
          0.00286576384678483,
          0.032501633279025555,
          -0.009070300031453371,
          -0.014357069972902536,
          -0.013252666220068932,
          0.006913855759194121,
          -0.016159581020474434,
          -0.012289536418393254,
          0.0017824184033088386,
          -0.003253662958741188,
          0.0011549373157322407,
          -0.005523537052795291,
          0.020031969994306564,
          0.03543129190802574,
          0.023329456336796284,
          0.018001174554228783,
          -0.008561435155570507,
          0.013185329269617796,
          -0.01165944174863398,
          -0.046602869406342506,
          -0.001165234949439764,
          -0.031511603854596615,
          -0.005595418391749263,
          0.011206772644072771,
          -0.018765174318104982,
          -0.057338446378707886,
          0.027901362627744675,
          -0.0002659491146914661,
          0.05068407766520977,
          -0.02143684681504965,
          -0.019913121359422803,
          0.02763468399643898,
          0.0014825996477156878,
          -0.008706863969564438,
          -0.014163292944431305,
          0.013241620501503348,
          -0.010994585929438472,
          -0.050197504460811615,
          0.019137978553771973,
          0.012420185841619968,
          0.03909086808562279,
          0.02968101017177105,
          -0.011693146545439959,
          0.017197695560753345,
          0.01874764682725072,
          0.011712989304214716,
          -0.02535632625222206,
          0.017711223801597953,
          -0.003375363303348422,
          -0.010459630320838187,
          0.010264159762300551,
          0.009724908552016132,
          -0.01239755330607295,
          -0.03886537626385689,
          -0.0042032281489809975,
          0.008700881619006395,
          0.029053899459540844,
          0.029025588184595108,
          -0.001942031376529485,
          -0.017692463006824255,
          0.01024505088571459,
          -0.0189695181325078,
          0.04287242144346237,
          0.08629221469163895,
          -0.0375514542683959,
          0.009203321766108274,
          0.011175038293004036,
          0.005654322216287255,
          -0.0029317601583898067,
          1.47059909068048e-05,
          -0.018644065596163273,
          0.008268751436844468,
          0.01856695767492056,
          -0.03263463266193867,
          0.009237760561518371,
          -0.015424893703311682,
          -0.028410861268639565,
          -0.008147160988301039,
          -0.020017920061945915,
          -0.05290735699236393,
          0.0017872258322313428,
          0.0024036045560933417,
          -0.023710908368229866,
          0.016686770133674145,
          -0.015957756899297237,
          -0.014480892568826675,
          0.002245332405436784,
          0.035829346626996994,
          -0.018522690515965223,
          -0.001801484773750417,
          -0.01680303132161498,
          0.0011938590287172701,
          0.010596265434287488,
          0.013736804947257042,
          0.010041146306321025,
          -0.022050118073821068,
          0.028375692665576935,
          0.029583959840238094,
          -0.012298951391130686,
          -0.005086615477921441,
          -0.018164444249123335,
          1.8595252186059952e-05,
          0.006465285550802946,
          -0.024874553084373474,
          0.001757097546942532,
          0.030471419915556908,
          -0.008287981007015333,
          -0.007738081971183419,
          0.028024724684655666,
          -0.023293137550354004,
          0.01342762727290392,
          0.020190740004181862,
          0.0012788319727405906,
          -0.007408320729155093,
          0.010786233120597899,
          -0.0037985275266692042,
          -0.012597955297678709,
          0.0012725392589345574,
          0.011680958326905966,
          0.007856203854316846,
          0.005589574226178229,
          -0.01756261568516493,
          0.04040937311947346,
          0.010193391004577279,
          0.019449542742222548,
          -0.0035834163427352905,
          0.007567134452983737,
          0.0414304044097662,
          0.011722317314706743,
          0.03262385353446007,
          0.005501835024915636,
          0.005458441297378158,
          -0.022843986749649048,
          -0.00612863153219223,
          -0.014464172534644604,
          -0.023185239173471928,
          -0.025008725933730602,
          0.005626335565466434,
          0.01781264878809452,
          -0.008481267839670181,
          0.007280642312252894,
          0.03804588131606579,
          -0.05280500091612339,
          -0.016605022363364697,
          0.00013843062333762646,
          -0.008716965094208717,
          -0.014837701804935932,
          0.014587108511477709,
          -0.03922630287706852,
          -0.009869147557765245,
          0.012792025227099657,
          -0.004630651557818055,
          -0.007696511136600748,
          -0.04398415796458721,
          -0.01737583940848708,
          0.0009650717256590724,
          0.03648985177278519,
          0.016245425678789616,
          0.015801627654582262,
          -0.02145078219473362,
          -0.017687844578176737,
          -0.0017056441865861416,
          0.022297445684671402,
          -0.03211243450641632,
          -0.0027634043362922966,
          -0.0058907498605549335,
          0.01610072050243616,
          0.009213273180648685,
          0.029273380525410175,
          -0.01934952288866043,
          0.010020508896559477,
          0.00013198237866163254,
          -0.00327504298184067,
          -0.0007266780594363809,
          -0.016826875507831573,
          -0.0011271431139903143,
          -0.0011757535394281149,
          -0.023103369865566492,
          -0.01169451093301177,
          -0.002680314559256658,
          0.008004334755241871,
          0.02947352733463049,
          0.015148002654314041,
          -0.005181885382626206,
          0.015140199568122625,
          0.03148019593209028,
          0.01710772654041648,
          0.015147340018302202,
          0.031536453403532505,
          0.0181514210999012,
          -0.009685518918558955,
          0.0005991628859192133,
          0.0030295781325548887,
          0.02397304307669401,
          0.016350368037819862,
          -0.005241090897470713,
          -0.010526258265599608,
          0.01964346505701542,
          -0.027443003840744495,
          0.0006171385757625103,
          0.039306377060711384,
          0.003917732043191791,
          0.004315967787988484,
          -0.019397280178964138,
          -0.027812332846224308,
          0.021518699824810028,
          -0.01271553715923801,
          0.007137624081224203,
          -0.005698105087503791,
          0.00626716879196465,
          0.017086241859942675,
          -0.013214085018262267,
          -0.005326774204149842,
          0.02288797963410616,
          0.04649423994123936,
          0.018622762290760875,
          0.0016941329231485724,
          0.015633317874744534,
          0.014851704007014632,
          -0.010760410688817501,
          -0.00417721550911665,
          -0.010304298135451972,
          -0.0010843102354556322,
          -0.018956143176183105,
          0.011556335724890232,
          0.003552843350917101,
          -0.020117225125432014,
          -0.0007676940294913948,
          0.010482753161340952,
          -0.039013681933283806,
          0.01834598812274635,
          0.0011834865435957909,
          -0.021443349309265614,
          0.020054353401064873,
          0.03894847445189953,
          -0.013049826491624117,
          0.012145685264840722,
          0.004067212110385299,
          0.0018899994902312756,
          0.020198211073875427,
          0.000674910974339582,
          -0.030527559109032154,
          0.027933397330343723,
          0.04494969733059406,
          0.03463510237634182,
          0.0027836569352075458,
          -0.02319500967860222,
          -0.03449738770723343,
          0.015233422163873911,
          -0.017530294600874186,
          -0.0018240073695778847,
          0.004295324324630201,
          0.010083440225571394,
          0.001476832025218755,
          -0.0024639954790472984,
          -0.00021934299729764462,
          0.02135421521961689,
          -0.01023749215528369,
          0.022498546168208122,
          0.016506179701536894,
          -0.04986513406038284,
          0.022755907848477364,
          0.00757074577268213,
          0.022303879261016846,
          -0.0030334556940943003,
          0.019224506802856922,
          -0.017432075925171375,
          -0.016254124231636524,
          -0.008853631094098091,
          0.002556051127612591,
          0.029609414748847485,
          0.029987056739628315,
          0.018079347908496857,
          0.039758503437042236,
          -0.0377658661454916,
          -0.0043609419371932745,
          0.00045227224472910166,
          0.020245851948857307,
          0.0038268169155344367,
          0.03492681123316288,
          -0.022123399190604687,
          0.005591046065092087,
          0.00996077642776072,
          -0.00010229396866634488,
          0.0028750398196280003,
          -0.020704603753983974,
          0.020978499203920364,
          -0.022868314757943153,
          -0.026673277840018272,
          0.03871427848935127,
          0.011648605577647686,
          -0.010935040656477213,
          -0.021594499237835407,
          -0.012732402421534061,
          0.012835608562454581,
          -0.006669174646958709,
          0.0064353832276538014,
          -0.02534825447946787,
          -0.008412593510001898,
          -0.02071410696953535,
          -0.052610745653510094,
          0.012567021185532212,
          -0.02064958354458213,
          -0.015866428148001432,
          0.004300309927202761,
          -0.022646814584732056,
          0.005419367924332619,
          -0.03339970111846924,
          0.0035430954885669053,
          0.030855773948132992,
          -0.006472930079326034,
          0.026170107536017895,
          -0.0143727483227849,
          0.012349628144875169,
          0.013632924761623144,
          -0.04681556858122349,
          -0.02197903674095869,
          0.0011628339998424053,
          -0.01663614297285676,
          -0.011435463093221188,
          0.0023762757919030264,
          -0.01601120689883828,
          0.008825702825561166,
          0.024297219701111317,
          0.01508571021258831,
          -0.02934258058667183,
          -0.004801106813829392,
          -0.021204082295298576,
          -0.025417418219149113,
          -0.0022541547659784555,
          0.0079113794490695,
          -0.001340063288807869,
          -0.004838498425669968,
          -0.011679430026561022,
          -0.007660689996555448,
          0.028261373285204172,
          0.018329734914004803,
          0.023131276480853558,
          -0.018856476992368698,
          0.039720652624964714,
          0.03800186887383461,
          0.03577138110995293,
          0.021932590752840042,
          0.0025221258401870728,
          -0.04413498938083649,
          -0.01708795316517353,
          -0.013153969775885344,
          0.03204300720244646,
          -0.02268473245203495,
          -0.019635955803096294,
          -0.003632591186033096,
          -0.029541932977735996,
          -0.03053228184580803,
          -0.022469449788331985,
          0.0003548259846866131,
          -0.019997863098978996,
          0.008404518477618694,
          0.034229785203933716,
          0.0007544040272478014,
          0.03122809063643217,
          0.005576531169936061,
          0.02790809329599142,
          0.03246296010911465,
          0.008117278513964266,
          -0.008837817120365798,
          -0.008126115426421165,
          0.008638937957584858,
          0.01963684055954218,
          0.048836227506399155,
          0.052280256524682045,
          0.020242325495928526,
          0.04861440509557724,
          -0.02000103797763586,
          0.007237405749037862,
          -0.005317921924870461,
          -0.009156569140031934,
          -0.0214627580717206,
          -0.0033754955511540174,
          0.018852212000638247,
          -0.005131262354552746,
          0.017379956785589457,
          0.017100322991609573,
          -0.034106002189219,
          -0.016186177730560303,
          0.011689287959598005,
          -0.003551610396243632,
          0.010455761570483446,
          0.006153233262011781,
          0.010023255366832018,
          -0.05438224598765373,
          0.007415539817884564,
          0.032221768982708454,
          -0.02204662188887596,
          0.02873798832297325,
          -0.01643384527415037,
          0.006107969442382455,
          0.00595495430752635,
          0.01792006567120552,
          -0.015302328392863274,
          0.0196214709430933,
          0.03196858800947666,
          0.01439951453357935,
          -0.003511849441565573,
          0.016754572745412588,
          -0.04209955967962742,
          -0.005725068040192127,
          0.025307761039584875,
          0.0071321045979857445,
          0.02534522581845522,
          0.04271698370575905,
          0.03424172382801771,
          -0.01631065458059311,
          0.020030846819281578,
          0.013547421433031559,
          0.0174872656352818,
          0.01450303103774786,
          0.009336314629763365,
          0.043071165680885315,
          0.00248671171721071,
          -0.018423440866172314,
          -0.04036433435976505,
          -0.011164283845573664,
          0.025435137562453747,
          0.008761731209233403,
          0.01981284422799945,
          -0.011791552416980267,
          -0.0025111587601713836,
          -0.017518403474241495,
          -0.02462136372923851,
          -0.0025733697693794966,
          -0.01324817631393671,
          0.007564851199276745,
          0.003997458959929645,
          -0.02315010828897357,
          0.015554062090814114,
          0.005956490931566805,
          0.0015559826279059052,
          0.0008066938607953489,
          -0.004213999258354306,
          0.015814718790352345,
          0.03241179883480072,
          0.006059709063265473,
          -0.0028880569734610617,
          -0.025097706355154514,
          -0.023758444003760815,
          -0.03509055823087692,
          -0.011383835226297379,
          0.028738731518387794,
          0.03395007364451885,
          -0.010359144303947687,
          -0.019501260481774807,
          -0.0002387820277363062
        ]
      }
    },
    "pca500_embeddings.npy": null
  }
}