{
  "project_group": "imbed_saves",
  "data_filenames": [
    "Icon\r",
    "pca_model.pkl",
    "planar_embeddings_first_forth.npy",
    "pca500.pkl",
    "kmeans_7_clusters_indices.pkl",
    "kmeans_14_clusters_indices.pkl",
    "kmeans_28_clusters_indices.pkl",
    "dbscan_7_kmeans.pkl",
    "planar_embeddings_pca500.npy",
    "ncvis_planar_pca500_embeddings.npy",
    "num_of_tokens.pkl",
    "planar_embeddings_of_grouped_conversations_with_metadata.tsv.zip",
    "planar_embeddings_grouped.tsv",
    "conversation_paths.tsv",
    "planar_embeddings_grouped.pkl",
    "planar_embeddings_of_grouped_conversations_with_metadata.tsv",
    "planar_embeddings_for_a_forth_of_data.tsv.zip",
    "planar_embeddings_for_a_forth_of_data.parquet",
    "planar_embeddings_for_a_forth_of_data.tsv",
    "flat_en.parquet",
    "lmsys_with_planar_embeddings_pca500.parquet",
    "flat_en_embeddings_pca100.npy",
    "flat_en_conversation_grouped_embeddings.parquet",
    "pca500_embeddings.npy"
  ],
  "data_filepaths": {
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/Icon\r": 0,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/pca_model.pkl": 1256504,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_first_forth.npy": 5671104,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/pca500.pkl": 6181310,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/kmeans_7_clusters_indices.pkl": 11342122,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/kmeans_14_clusters_indices.pkl": 11342122,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/kmeans_28_clusters_indices.pkl": 11342122,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/dbscan_7_kmeans.pkl": 11348179,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_pca500.npy": 22684048,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/ncvis_planar_pca500_embeddings.npy": 22684048,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/num_of_tokens.pkl": 23975730,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_of_grouped_conversations_with_metadata.tsv.zip": 32180527,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_grouped.tsv": 45993672,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/conversation_paths.tsv": 47010273,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_grouped.pkl": 51364649,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_of_grouped_conversations_with_metadata.tsv": 121927350,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_for_a_forth_of_data.tsv.zip": 193523605,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_for_a_forth_of_data.parquet": 268069996,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/planar_embeddings_for_a_forth_of_data.tsv": 603098065,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/flat_en.parquet": 1086856345,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/lmsys_with_planar_embeddings_pca500.parquet": 1099754417,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/flat_en_embeddings_pca100.npy": 2268392128,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/flat_en_conversation_grouped_embeddings.parquet": 7516951406,
    "/Users/thorwhalen/Dropbox/_odata/app_data/imbed/saves/lmsys-chat-1m/pca500_embeddings.npy": 11341960128
  },
  "code_file": "lmsys_ai_conversations.py",
  "code_contents": "\"\"\"\nLymsys AI Conversations\n\nSee paper: https://arxiv.org/pdf/2309.11998.pdf\nData here: https://huggingface.co/papers/2309.11998\n\n\"\"\"\n\nfrom functools import cached_property, partial\nimport os\nfrom dataclasses import dataclass\nfrom typing import List, Tuple, Dict, Any, Callable, Union, Literal\nfrom collections import Counter\nfrom itertools import chain\n\nimport pandas as pd\nimport numpy as np\nfrom datasets import load_dataset\n\nfrom dol import Files, add_ipython_key_completions\nfrom tabled import expand_rows, expand_columns\nfrom imbed.util import saves_join, merge_data, extension_based_wrap, counts\n\n\ndef concatenate_arrays(arrays):\n    \"\"\"Essentially, np.vstack(arrays) but faster\"\"\"\n    n_arrays = len(arrays)\n    array_size = len(arrays[0])\n    return np.concatenate(arrays).reshape(n_arrays, array_size)\n\n\ndata_name = 'lmsys-chat-1m'\nhuggingface_data_stub = 'lmsys/lmsys-chat-1m'\ndata_saves_join = partial(saves_join, data_name)\n\n\nDataSpec = Union[str, Any]\n\n\n@dataclass\nclass Dacc:\n    name = data_name\n\n    dataset_dict_loader: Callable = partial(load_dataset, huggingface_data_stub)\n    saves_dir: str = data_saves_join()\n\n    @cached_property\n    def saves_bytes_store(self):\n        if not os.path.isdir(self.saves_dir):\n            os.mkdir(self.saves_dir)\n        return Files(self.saves_dir)\n\n    @cached_property\n    def saves(self):\n        return add_ipython_key_completions(extension_based_wrap(self.saves_bytes_store))\n\n    def get_data(self, data_spec: DataSpec, *, assert_type=None):\n        if isinstance(data_spec, str):\n            # if data_spec is a string, check if it's an attribute or a key of saves\n            if hasattr(self, data_spec):\n                return getattr(self, data_spec)\n            elif data_spec in self.saves:\n                return self.saves[data_spec]\n        if assert_type:\n            assert isinstance(\n                data_spec, assert_type\n            ), f\"{data_spec=} is not {assert_type}\"\n        # just return the data_spec itself as the data\n        return data_spec\n\n    @cached_property\n    def dataset_dict(self):\n        return self.dataset_dict_loader()\n\n    @property\n    def _train_data(self):\n        return self.dataset_dict['train']\n\n    @cached_property\n    def train_data(self):\n        return self._train_data.to_pandas()\n\n    @cached_property\n    def conversation_sizes(self):\n        _conversation_sizes = self.train_data.conversation.apply(len)\n        assert all(\n            _conversation_sizes == self.train_data.turn * 2\n        ), \"Some turns were not twice the conversation size\"\n        return _conversation_sizes\n\n    @cached_property\n    def language_count(self):\n        return counts(self.train_data['language'])\n\n    @cached_property\n    def model_count(self):\n        return counts(self.train_data['model'])\n\n    @cached_property\n    def redacted_count(self):\n        return counts(self.train_data['redacted'])\n\n    @cached_property\n    def role_count(self):\n        c = Counter(\n            x['role'] for x in chain.from_iterable(self.train_data.conversation)\n        )\n        return pd.Series(dict(c.most_common()))\n\n    @cached_property\n    def en_df(self):\n        return self.train_data[self.train_data['language'] == 'English']\n\n    @cached_property\n    def flat_en(self):\n        t = self.en_df\n        t = expand_rows(t, ['conversation', 'openai_moderation'])\n        t = expand_columns(t, ['conversation', 'openai_moderation'], key_mapper=None)\n        t = expand_columns(t, ['categories'], key_mapper=None)\n        t = expand_columns(t, ['category_scores'])\n        return t\n\n    @cached_property\n    def flat_en_embeddable(self):\n        from oa.util import embeddings_models\n        from oa import text_is_valid\n        import numpy as np\n\n        model = 'text-embedding-3-small'\n        max_tokens = embeddings_models[model]['max_input']\n\n        # TODO: Make it source from self.flat_en directly (once persistent caching is working)\n        # TODO: Also make it check if dacc.flat_en is loaded or not before, and if not, unload it after using.\n        flat_en = self.saves['flat_en.parquet']\n\n        lidx = ~np.array(\n            list(\n                text_is_valid(\n                    flat_en.content,\n                    flat_en.num_of_tokens,\n                    max_tokens=max_tokens,\n                    model=model,\n                )\n            )\n        )\n        invalid_conversations = set(flat_en[lidx]['conversation_id'])\n\n        print(f\"{len(invalid_conversations)=}\")\n\n        df = flat_en[~flat_en.conversation_id.isin(invalid_conversations)]\n        return df\n\n    @property\n    def flat_en_embeddings_store(self):\n        from dol import KeyTemplate, cache_iter\n\n        key_template = KeyTemplate(\n            'flat_en_embeddings/{index}.parquet',\n            from_str_funcs={'index': int},\n            to_str_funcs={'index': \"{:04d}\".format},\n        )\n        s = key_template.filt_iter(self.saves)\n        s = key_template.key_codec(decoded='single')(s)\n        s = cache_iter(s, keys_cache=sorted)\n        return s\n\n    @cached_property\n    def flat_en_embeddings(self):\n        return pd.concat(self.flat_en_embeddings_store.values())\n\n    def flat_en_embeddings_iter(self):\n        \"\"\"Yields embeddings matrices\"\"\"\n        return map(\n            lambda x: concatenate_arrays(x['embeddings'].values),\n            self.flat_en_embeddings_store.values(),\n        )\n\n    @property\n    def embeddings_matrix(self):\n        # return np.vstack(self.flat_en_embeddings_iter())\n        return concatenate_arrays(self.flat_en_embeddings.embeddings.values)\n\n    @cached_property\n    def flat_en_conversation_grouped_embeddings(self):\n        # TODO: This is the kind of thing that the save decorator should take care of\n        if 'flat_en_conversation_grouped_embeddings.parquet' in self.saves:\n            return self.saves['flat_en_conversation_grouped_embeddings.parquet']\n        else:\n            g = self.flat_en_embeddings\n            g = g.drop(columns=['content'])\n            # groupby conversation_id, doing the following with, for each group:\n            g = g.groupby('conversation_id')\n            g = g.agg({'num_of_tokens': 'sum', 'embeddings': 'mean'})\n            self.saves['flat_en_conversation_grouped_embeddings.parquet'] = g\n            return g\n\n    def planar_embeddings_with_metadata(\n        self,\n        planar_embeddings: DataSpec,\n        metadata: DataSpec = 'flat_en_embeddable',\n        *,\n        merge_on=None,\n    ):\n        planar_embeddings = self.get_data(planar_embeddings)\n        metadata = self.get_data(metadata)\n\n        return merge_data(\n            metadata, planar_embeddings, merge_on=merge_on, data_2_cols=['x', 'y']\n        )\n\n    @property\n    def planar_embeddings_of_grouped_conversations(self):\n        t = self.saves['planar_embeddings_grouped.pkl']\n        t = pd.Series(t)\n        t = pd.DataFrame(t).reset_index()\n        t = t.rename(columns={'index': 'conversation_id'})\n        t['x'] = t[0].apply(lambda x: x[0])\n        t['y'] = t[0].apply(lambda x: x[1])\n        t = t.drop(0, axis=1)\n        t.index.name = 'id'\n        # self.saves['planar_embeddings_grouped.tsv'] = t\n        return t\n\n    @property\n    def meta_for_grouped_conversations(self):\n        meta = self.saves['flat_en.parquet']\n        nested_columns = list(filter(lambda x: '.' in x, meta.columns))\n        meta = meta.drop(\n            ['language', 'redacted', 'content', 'role'] + nested_columns, axis=1\n        )\n        aggregate_specs_1 = {\n            'model': lambda x: x[0],\n            'turn': lambda x: x[0],\n            'flagged': 'mean',\n            'num_of_tokens': 'sum',\n        }\n        remaining_columns = (\n            set(meta.columns) - set(aggregate_specs_1.keys()) - {'conversation_id'}\n        )\n        aggregate_specs = {\n            'model': 'first',\n            'turn': 'first',\n            'flagged': 'mean',\n            'num_of_tokens': 'sum',\n            **{col: 'mean' for col in remaining_columns},\n        }\n\n        # group by conversaion_id and apply aggaggregate_specs to each group\n        meta = meta.groupby('conversation_id').agg(aggregate_specs)\n        meta = meta.reset_index(drop=False)\n        return meta\n\n    @property\n    def planar_embeddings_of_grouped_conversations_with_metadata(self):\n        e = self.planar_embeddings_of_grouped_conversations\n        meta = self.meta_for_grouped_conversations\n        df = merge_data(e, meta, merge_on='conversation_id')\n        df['id'] = df.conversation_id  # just because cosmograph needs it!\n        return df\n        # dacc.saves['planar_embeddings_of_grouped_conversations_with_metadata.tsv'] = df\n\n\nLmsysDacc = Dacc  # backwards compatibility alias\n\n\ndef mk_dacc():\n    return Dacc()\n\n\n# def dataframe_to_embed(dacc=None):\n#     from oa.util import embeddings_models\n#     from oa import text_is_valid\n#     import numpy as np\n\n#     dacc = dacc or mk_dacc()\n\n#     model = 'text-embedding-3-small'\n#     max_tokens = embeddings_models[model]['max_input']\n\n#     flat_en = dacc.saves['flat_en.parquet']\n\n#     lidx = ~np.array(\n#         list(\n#             text_is_valid(\n#                 flat_en.content,\n#                 flat_en.num_of_tokens,\n#                 max_tokens=max_tokens,\n#                 model=model,\n#             )\n#         )\n#     )\n#     invalid_conversations = set(flat_en[lidx]['conversation_id'])\n\n#     print(f\"{len(invalid_conversations)=}\")\n\n#     df = flat_en[~flat_en.conversation_id.isin(invalid_conversations)]\n#     return df\n\nfrom imbed.util import clog\nfrom imbed.base import batches, DFLT_CHK_SIZE\n\n\ndef compute_and_save_embeddings(\n    dacc=None,\n    *,\n    chk_size=DFLT_CHK_SIZE,  # needs to be under max batch size of 2048\n    validate=False,\n    overwrite_chunks=False,\n    model='text-embedding-3-small',\n    verbose=1,\n    exclude_chk_ids=(),\n    include_chk_ids=(),\n):\n    _clog = partial(clog, verbose)\n    __clog = partial(clog, verbose >= 2)\n\n    dacc = dacc or mk_dacc()\n    df = dacc.flat_en_embeddable[['conversation_id', 'content', 'num_of_tokens']]\n\n    from oa import embeddings as embeddings_\n    import pandas as pd\n    from functools import partial\n    import os\n\n    embeddings = partial(embeddings_, validate=validate, model=model)\n\n    def key_for_chunk_index(i):\n        return f\"flat_en_embeddings/{i:04d}.parquet\"\n\n    def store_chunk(i, chunk):\n        save_path = os.path.join(dacc.saves.rootdir, key_for_chunk_index(i))\n        chunk.to_parquet(save_path)\n\n    for i, index_and_row in enumerate(batches(df, chk_size)):\n        if i in exclude_chk_ids or (include_chk_ids and i not in include_chk_ids):\n            # skip this chunk if it is in the exclude list or if the\n            # include list is not empty and this chunk is not in it\n            __clog(\n                f\"Skipping {i=} because it is in the exclude list or not in the include list.\"\n            )\n            continue\n        if not overwrite_chunks and key_for_chunk_index(i) in dacc.saves:\n            _clog(f\"Skipping {i=} because it is already saved.\")\n            continue\n        # else...\n        if i % 100 == 0:\n            _clog(f\"Processing {i=}\")\n        try:\n            chunk = pd.DataFrame(\n                [x[1] for x in index_and_row], index=[x[0] for x in index_and_row]\n            )\n            vectors = embeddings(chunk.content.tolist())\n            chunk['embeddings'] = vectors\n            store_chunk(i, chunk)\n        except Exception as e:\n            _clog(f\"--> ERROR: {i=}, {e=}\")\n\n\ndef compute_and_save_planar_embeddings(dacc=None, verbose=1):\n    from imbed import umap_2d_embeddings\n\n    dacc = dacc or mk_dacc()\n    _clog = partial(clog, verbose)\n\n    _clog(\"Getting flat_en_embeddings\")\n    dacc.flat_en_embeddings\n\n    _clog(f\"{len(dacc.flat_en_embeddings.shape)=}\")\n    _clog(\"Making an embeddings store from it, using flat_end_embeddings keys as keys\")\n    embdeddings_store = {\n        id_: row.embeddings for id_, row in dacc.flat_en_embeddings.iterrows()\n    }\n\n    _clog(\"Offload the flat_en_embeddings from memory\")\n    del dacc.flat_en_embeddings\n\n    _clog(\"Computing the 2d embeddings (the long process)...\")\n    planar_embeddings = umap_2d_embeddings(embdeddings_store)\n\n    _clog(\"Reformatting the embeddings into a DataFrame\")\n    planar_embeddings = pd.DataFrame(planar_embeddings, index=['x', 'y']).T\n\n    _clog(\"Saving the planar embeddings to planar_embeddings.parquet'\")\n    dacc.saves['planar_embeddings.parquet'] = planar_embeddings\n\n\ndef compute_and_save_incremental_pca(\n    dacc=None,\n    verbose=2,\n    *,\n    n_pca_components=500,\n    save_name='pca{pca_components}.pkl',\n):\n\n    dacc = dacc or mk_dacc()\n\n    save_name = save_name.format(pca_components=n_pca_components)\n\n    _clog = partial(clog, int(verbose))\n    __clog = partial(clog, int(verbose) >= 2)\n\n    # X = np.load(data_saves_join('flat_en_embeddings.npy'))\n\n    _clog(f\"Taking the PCA ({n_pca_components=}) of the embeddings...\")\n\n    from sklearn.decomposition import IncrementalPCA\n\n    # TODO: Make a chunker that ensures that the chunks are not too small for incremental PCA\n    pca = IncrementalPCA(n_components=n_pca_components)\n    for i, embeddings_chunk in enumerate(dacc.flat_en_embeddings_iter(), 1):\n        try:\n            __clog(f\"   Processing chunk (#{i}) of {embeddings_chunk.shape=}\")\n            pca.partial_fit(embeddings_chunk)\n        except Exception as e:\n            # TODO: Save intermediate results?\n            if 'must be less or equal to the batch number of samples' in e.args[0]:\n                break  # it's the last chunk\n\n    # def compute_pca_projections():\n    #     for embeddings_chunk in dacc.flat_en_embeddings_iter():\n    #         yield pca.transform(embeddings_chunk)\n\n    # X = np.vstack(compute_pca_projections())\n\n    if save_name:\n        _clog(f\"Saving the planar embeddings to {save_name}\")\n        dacc.saves[save_name] = pca\n\n    return pca\n\n\ndef compute_and_save_pca_of_embeddings(\n    dacc=None,\n    verbose=1,\n    *,\n    pca_model='pca500.pkl',\n    pca_embeddings_name='pca500_embeddings.npy',\n):\n    dacc = dacc or mk_dacc()\n    _clog = partial(clog, int(verbose))\n\n    _clog(f\"Loading the PCA model {pca_model=}\")\n    pca = dacc.saves[pca_model]\n\n    _clog(\"Computing the PCA projections of the embeddings\")\n    X = pca.transform(dacc.embeddings_matrix)\n\n    _clog(f\"Saving the PCA embeddings to {pca_embeddings_name}\")\n    dacc = mk_dacc()  # to offload the dacc's data\n    dacc.saves[pca_embeddings_name] = X\n    return X\n\n\ndef compute_and_save_ncvis_planar_embeddings(\n    dacc=None,\n    verbose=1,\n    *,\n    embeddings_save_name='pca500_embeddings.npy',\n    ncvis_planar_embeddings_name='ncvis_planar_pca500_embeddings.npy',\n):\n    import ncvis\n\n    _clog = partial(clog, int(verbose))\n\n    _clog(f\"Loading the embeddings from {embeddings_save_name=}\")\n    dacc = dacc or mk_dacc()\n    X = dacc.saves[embeddings_save_name]\n\n    _clog(\"Computing the NCVis planar embeddings\")\n    vis = ncvis.NCVis(d=2, distance='cosine')\n    ncvis_planar_embeddings = vis.fit_transform(X)\n\n    _clog(f\"Saving the NCVis planar embeddings to {ncvis_planar_embeddings_name=}\")\n    dacc.saves[ncvis_planar_embeddings_name] = ncvis_planar_embeddings\n\n    return ncvis_planar_embeddings\n\n\ndef compute_and_save_planar_embeddings_with_incremental_pca(\n    dacc=None,\n    verbose=1,\n    *,\n    n_pca_components=500,\n    save_name='planar_embeddings_pca{pca_components}_{planar_projector}.npy',\n    planar_projector: Literal['umap', 'ncvis'] = 'ncvis',\n):\n\n    assert __import__(planar_projector), f\"No {planar_projector=} installed\"\n\n    dacc = dacc or mk_dacc()\n\n    save_name = save_name.format(\n        pca_components=n_pca_components, planar_projector=planar_projector\n    )\n\n    _clog = partial(clog, verbose)\n\n    # X = np.load(data_saves_join('flat_en_embeddings.npy'))\n\n    _clog(f\"Taking the PCA ({n_pca_components=}) of the embeddings...\")\n\n    from sklearn.decomposition import IncrementalPCA\n\n    pca = IncrementalPCA(n_components=n_pca_components)\n    for embeddings_chunk in dacc.flat_en_embeddings_iter():\n        pca.partial_fit(embeddings_chunk)\n\n    def compute_pca_projections():\n        for embeddings_chunk in dacc.flat_en_embeddings_iter():\n            yield pca.transform(embeddings_chunk)\n\n    X = np.vstack(compute_pca_projections())\n\n    _clog(f\"{len(X.shape)=}\")\n\n    _clog(\"And now, {planar_projector}... Crossing fingers\")\n\n    if planar_projector == 'umap':\n        import umap\n\n        planar_embeddings = umap.UMAP(\n            n_components=2, output_metric='cosine'\n        ).fit_transform(X)\n\n    elif planar_projector == 'ncvis':\n        import ncvis\n\n        planar_embeddings = ncvis.NCVis(d=2, distance='cosine').fit_transform(X)\n\n    _clog(\"deleting X\")\n    del X\n\n    if save_name:\n        _clog(f\"Saving the planar embeddings to {save_name}\")\n        try:\n            dacc.saves[save_name] = planar_embeddings\n        except:\n            # Just a backup in case the above fails\n            np.save(\n                data_saves_join(save_name),\n                planar_embeddings,\n            )\n    return planar_embeddings\n\n\ndef compute_and_save_planar_embeddings_light(\n    dacc=None,\n    verbose=1,\n    *,\n    n_pca_components=500,\n    save_name='planar_embeddings_pca{pca_components}_{planar_projector}.npy',\n    planar_projector: Literal['umap', 'ncvis'] = 'ncvis',\n    incremental_pca_chunk_size: int = None,\n):\n\n    assert __import__(planar_projector), f\"No {planar_projector=} installed\"\n\n    dacc = dacc or mk_dacc()\n\n    save_name = save_name.format(\n        pca_components=n_pca_components, planar_projector=planar_projector\n    )\n\n    _clog = partial(clog, verbose)\n\n    _clog(\"Loading embeddings\")\n    import numpy as np\n\n    X = concatenate_arrays(dacc.flat_en_embeddings.embeddings.values)\n    del dacc  # offloading data\n    # X = np.load(data_saves_join('flat_en_embeddings.npy'))\n\n    _clog(f\"Taking the PCA ({n_pca_components=}) of the embeddings {X.shape=}...\")\n\n    if not incremental_pca_chunk_size:\n        from sklearn.decomposition import PCA\n\n        X = PCA(n_components=n_pca_components).fit_transform(X)\n    else:\n        from sklearn.decomposition import IncrementalPCA\n\n        pca = IncrementalPCA(n_components=n_pca_components)\n        chk_size = int(incremental_pca_chunk_size)\n        n = len(X)\n        for i in range(0, n, chk_size):\n            # print progress on the same line\n            # _clog(f\"Rows {i}/{n}\")\n            X_chunk = X[i : (i + chk_size)]\n            pca.partial_fit(X_chunk)\n        X = pca.transform(X)\n\n    # _clog(\"Taking only part of them\")\n    # X = X[(X.shape[0] // 2):]\n\n    _clog(f\"{len(X.shape)=}\")\n\n    _clog(\"And now, {planar_projector}... Crossing fingers\")\n\n    if planar_projector == 'umap':\n        import umap\n\n        planar_embeddings = umap.UMAP(\n            n_components=2, output_metric='cosine'\n        ).fit_transform(X)\n\n    elif planar_projector == 'ncvis':\n        import ncvis\n\n        planar_embeddings = ncvis.NCVis(d=2, distance='cosine').fit_transform(X)\n\n    _clog(\"deleting X\")\n    del X\n\n    if save_name:\n        dacc = mk_dacc()\n        _clog(f\"Saving the planar embeddings to {save_name}\")\n        try:\n            dacc.saves[save_name] = planar_embeddings\n        except:\n            # Just a backup in case the above fails\n            np.save(\n                data_saves_join(save_name),\n                planar_embeddings,\n            )\n    return planar_embeddings\n\n\ndef compute_and_save_grouped_embeddings(dacc=None, verbose=1):\n    from imbed import umap_2d_embeddings\n\n    _clog = partial(clog, verbose)\n\n    _clog(\"Loading grouped embeddings\")\n    dacc = dacc or mk_dacc()\n    saves = dacc.saves\n\n    d = dacc.flat_en_conversation_grouped_embeddings\n\n    _clog(\"Making key-value store from them\")\n    d = {k: v['embeddings'] for k, v in d.iterrows()}\n    _clog(\"Deleting dacc to free up memory\")\n    del dacc\n\n    _clog(\"Computing planar embeddings\")\n    planar_embeddings = umap_2d_embeddings(d)\n\n    _clog(\"Saving the planar embeddings to planar_embeddings_grouped.pkl'\")\n    saves['planar_embeddings_grouped.pkl'] = planar_embeddings\n\n\ndef compute_and_save_embeddings_pca(\n    dacc=None,\n    verbose: int = 1,\n    *,\n    pca_components: int = 100,\n    chk_size: int = 50_000,\n    data_name: str = 'pca_model.pkl',\n):\n    import numpy as np\n\n    _clog = partial(clog, verbose)\n\n    dacc = dacc or mk_dacc()\n    saves = dacc.saves\n\n    _clog(\"Loading data...\")\n    X = dacc.flat_en_embeddings.embeddings\n    del dacc  # offloading data\n\n    _clog(\"Making a data matrix X from it...\")\n    X = np.vstack(X.tolist())\n    _clog(f\"{len(X)=}\")\n\n    from sklearn.decomposition import IncrementalPCA\n\n    pca = IncrementalPCA(n_components=pca_components)\n\n    # fit the PCA by chunks\n    chk_size = 10_000\n    n = len(X)\n    for i in range(0, n, chk_size):\n        # print progress on the same line\n        _clog(f\"Rows {i}/{n}\")\n        X_chunk = X[i : (i + chk_size)]\n        pca.partial_fit(X_chunk)\n\n    if data_name:\n        _clog(f\"Saving the PCA to {data_name}\")\n        saves[data_name] = pca\n\n    return pca\n\n\n# Note: DbScan slow (90mn for 3M rows of 100 columns)\ndef compute_and_save_dbscan(\n    dacc=None,\n    verbose: int = 1,\n    *,\n    eps=0.7,\n    min_samples=1000,\n    source_data_name='flat_en_embeddings_pca100.npy',\n    data_name='dbscan_0.7_1000_pca100.pkl',\n):\n    from sklearn.cluster import DBSCAN\n    from sklearn.preprocessing import StandardScaler\n\n    _clog = partial(clog, verbose)\n\n    _clog(\"Loading data...\")\n    dacc = dacc or mk_dacc()\n\n    X = dacc.saves[source_data_name]\n\n    _clog(\"Standardizing the data...\")\n    X = StandardScaler().fit_transform(X)\n\n    _clog(f\"Computing DBSCAN(eps={eps}, min_samples={min_samples})...\")\n    dbscan = DBSCAN(eps=eps, min_samples=min_samples).fit(X)\n\n    rootdir = getattr(dacc.saves, 'rootdir', '')\n    _clog(f\"Saving the DBSCAN to {os.path.join(rootdir, data_name)}\")\n    dacc.saves[data_name] = dbscan\n\n    return dbscan\n\n\ndef compute_and_save_kmeans(\n    dacc=None,\n    verbose: int = 1,\n    *,\n    X=None,\n    standardized_X=None,\n    n_clusters=7,\n    source_data_name='flat_en_embeddings_pca100.npy',\n    data_name='kmeans_{n_clusters}_clusters_indices.pkl',\n):\n    \"\"\"Compute the kmeans clusting and save it to the data store.\"\"\"\n    from sklearn.cluster import KMeans\n    from sklearn.preprocessing import StandardScaler\n\n    _clog = partial(clog, verbose)\n\n    dacc = dacc or mk_dacc()\n\n    if X is None:\n        _clog(\"Loading data...\")\n        X = dacc.saves[source_data_name]\n\n    if standardized_X is None:\n        assert X is not None, \"Need to provide X if standardized_X is not provided\"\n        _clog(\"Standardizing the data...\")\n        standardized_X = StandardScaler().fit_transform(X)\n\n    _clog(f\"Computing Kmeans(n_clusters={n_clusters})...\")\n    kmeans_clusters = KMeans(n_clusters=n_clusters).fit_predict(standardized_X)\n\n    if data_name is not None:\n        rootdir = getattr(dacc.saves, 'rootdir', '')\n        _clog(\n            f\"Saving the kmeans cluster indices to {os.path.join(rootdir, data_name)}\"\n        )\n        if '{n_clusters}' in data_name:\n            data_name = data_name.format(n_clusters=n_clusters)\n        dacc.saves[data_name] = kmeans_clusters\n\n    return kmeans_clusters\n\n\nif __name__ == '__main__':\n    from argh import dispatch_commands\n\n    dispatch_commands(\n        [\n            compute_and_save_embeddings,\n            compute_and_save_incremental_pca,\n            compute_and_save_planar_embeddings,\n            compute_and_save_planar_embeddings_with_incremental_pca,\n            compute_and_save_planar_embeddings_light,\n            compute_and_save_grouped_embeddings,\n            compute_and_save_embeddings_pca,\n            compute_and_save_dbscan,\n            compute_and_save_kmeans,\n            compute_and_save_ncvis_planar_embeddings,\n        ]\n    )\n",
  "num_of_data_files": 24,
  "tables_info": {
    "Icon\r": null,
    "pca_model.pkl": null,
    "planar_embeddings_first_forth.npy": null,
    "pca500.pkl": null,
    "kmeans_7_clusters_indices.pkl": null,
    "kmeans_14_clusters_indices.pkl": null,
    "kmeans_28_clusters_indices.pkl": null,
    "dbscan_7_kmeans.pkl": null,
    "planar_embeddings_pca500.npy": null,
    "ncvis_planar_pca500_embeddings.npy": null,
    "num_of_tokens.pkl": null,
    "planar_embeddings_of_grouped_conversations_with_metadata.tsv.zip": null,
    "planar_embeddings_grouped.tsv": {
      "shape": [
        766507,
        3
      ],
      "first_row": {
        "conversation_id": "00004b39283d4d9fabd2915cdf2f603e",
        "x": 4.826485,
        "y": 6.85775
      }
    },
    "conversation_paths.tsv": {
      "shape": [
        2068983,
        2
      ],
      "first_row": {
        "source": 833126,
        "target": 833127
      }
    },
    "planar_embeddings_grouped.pkl": null,
    "planar_embeddings_of_grouped_conversations_with_metadata.tsv": {
      "shape": [
        766507,
        19
      ],
      "first_row": {
        "conversation_id": "00004b39283d4d9fabd2915cdf2f603e",
        "x": 4.826485,
        "y": 6.85775,
        "model": "alpaca-13b",
        "turn": 1,
        "flagged": 0.0,
        "num_of_tokens": 46,
        "violence": 0.0,
        "sexual/minors": 0.0,
        "sexual": 0.0,
        "self-harm": 0.0,
        "self-harm/intent": 0.0,
        "hate/threatening": 0.0,
        "self-harm/instructions": 0.0,
        "harassment/threatening": 0.0,
        "violence/graphic": 0.0,
        "harassment": 0.0,
        "hate": 0.0,
        "id": "00004b39283d4d9fabd2915cdf2f603e"
      }
    },
    "planar_embeddings_for_a_forth_of_data.tsv.zip": null,
    "planar_embeddings_for_a_forth_of_data.parquet": {
      "shape": [
        708872,
        33
      ],
      "first_row": {
        "conversation_id": "33f01939a744455c869cb234afca47f1",
        "model": "wizardlm-13b",
        "turn": 1,
        "language": "English",
        "redacted": false,
        "content": "how can identity protection services help protect me against identity theft",
        "role": "user",
        "flagged": false,
        "harassment": false,
        "harassment/threatening": false,
        "hate": false,
        "hate/threatening": false,
        "self-harm": false,
        "self-harm/instructions": false,
        "self-harm/intent": false,
        "sexual": false,
        "sexual/minors": false,
        "violence": false,
        "violence/graphic": false,
        "category_scores.harassment": 9.212e-07,
        "category_scores.harassment/threatening": 3.627e-07,
        "category_scores.hate": 8.255e-07,
        "category_scores.hate/threatening": 1.33e-08,
        "category_scores.self-harm": 1.926e-07,
        "category_scores.self-harm/instructions": 6.5e-08,
        "category_scores.self-harm/intent": 2.753e-07,
        "category_scores.sexual": 2.564e-06,
        "category_scores.sexual/minors": 4.523e-07,
        "category_scores.violence": 2.29428e-05,
        "category_scores.violence/graphic": 1.9713e-06,
        "num_of_tokens": 11,
        "x": -0.0160798207,
        "y": 0.2798625529
      }
    },
    "planar_embeddings_for_a_forth_of_data.tsv": {
      "shape": [
        708874,
        33
      ],
      "first_row": {
        "conversation_id": "33f01939a744455c869cb234afca47f1",
        "model": "wizardlm-13b",
        "turn": 1,
        "language": "English",
        "redacted": false,
        "content": "how can identity protection services help protect me against identity theft",
        "role": "user",
        "flagged": false,
        "harassment": false,
        "harassment/threatening": false,
        "hate": false,
        "hate/threatening": false,
        "self-harm": false,
        "self-harm/instructions": false,
        "self-harm/intent": false,
        "sexual": false,
        "sexual/minors": false,
        "violence": false,
        "violence/graphic": false,
        "category_scores.harassment": 9.212e-07,
        "category_scores.harassment/threatening": 3.627e-07,
        "category_scores.hate": 8.255e-07,
        "category_scores.hate/threatening": 1.33e-08,
        "category_scores.self-harm": 1.926e-07,
        "category_scores.self-harm/instructions": 6.5e-08,
        "category_scores.self-harm/intent": 2.753e-07,
        "category_scores.sexual": 2.564e-06,
        "category_scores.sexual/minors": 4.523e-07,
        "category_scores.violence": 2.29428e-05,
        "category_scores.violence/graphic": 1.9713e-06,
        "num_of_tokens": 11.0,
        "x": -0.01607982,
        "y": 0.27986255
      }
    },
    "flat_en.parquet": {
      "shape": [
        2996946,
        31
      ],
      "first_row": {
        "conversation_id": "33f01939a744455c869cb234afca47f1",
        "model": "wizardlm-13b",
        "turn": 1,
        "language": "English",
        "redacted": false,
        "content": "how can identity protection services help protect me against identity theft",
        "role": "user",
        "flagged": false,
        "harassment": false,
        "harassment/threatening": false,
        "hate": false,
        "hate/threatening": false,
        "self-harm": false,
        "self-harm/instructions": false,
        "self-harm/intent": false,
        "sexual": false,
        "sexual/minors": false,
        "violence": false,
        "violence/graphic": false,
        "category_scores.harassment": 9.212e-07,
        "category_scores.harassment/threatening": 3.627e-07,
        "category_scores.hate": 8.255e-07,
        "category_scores.hate/threatening": 1.33e-08,
        "category_scores.self-harm": 1.926e-07,
        "category_scores.self-harm/instructions": 6.5e-08,
        "category_scores.self-harm/intent": 2.753e-07,
        "category_scores.sexual": 2.564e-06,
        "category_scores.sexual/minors": 4.523e-07,
        "category_scores.violence": 2.29428e-05,
        "category_scores.violence/graphic": 1.9713e-06,
        "num_of_tokens": 11
      }
    },
    "lmsys_with_planar_embeddings_pca500.parquet": {
      "shape": [
        2835490,
        38
      ],
      "first_row": {
        "conversation_id": "33f01939a744455c869cb234afca47f1",
        "model": "wizardlm-13b",
        "turn": 1,
        "language": "English",
        "redacted": false,
        "content": "how can identity protection services help protect me against identity theft",
        "role": "user",
        "flagged": false,
        "harassment": false,
        "harassment/threatening": false,
        "hate": false,
        "hate/threatening": false,
        "self-harm": false,
        "self-harm/instructions": false,
        "self-harm/intent": false,
        "sexual": false,
        "sexual/minors": false,
        "violence": false,
        "violence/graphic": false,
        "category_scores.harassment": 9.212e-07,
        "category_scores.harassment/threatening": 3.627e-07,
        "category_scores.hate": 8.255e-07,
        "category_scores.hate/threatening": 1.33e-08,
        "category_scores.self-harm": 1.926e-07,
        "category_scores.self-harm/instructions": 6.5e-08,
        "category_scores.self-harm/intent": 2.753e-07,
        "category_scores.sexual": 2.564e-06,
        "category_scores.sexual/minors": 4.523e-07,
        "category_scores.violence": 2.29428e-05,
        "category_scores.violence/graphic": 1.9713e-06,
        "num_of_tokens": 11,
        "x_umap": 7.9328036308,
        "y_umap": -1.7505877018,
        "clusters_07": 4,
        "clusters_14": 4,
        "clusters_28": 15,
        "x_ncvis": -13.9816789627,
        "y_ncvis": -5.5302248001
      }
    },
    "flat_en_embeddings_pca100.npy": null,
    "flat_en_conversation_grouped_embeddings.parquet": {
      "shape": [
        766507,
        2
      ],
      "first_row": {
        "num_of_tokens": 46,
        "embeddings": [
          0.0160153392,
          0.0040425378,
          -0.0019018571,
          -0.0078574487,
          0.0134382567,
          -0.0711998455,
          -0.0124193978,
          0.0258120904,
          0.0017556227,
          0.0154326092,
          0.0134299078,
          -0.0435143337,
          0.0058852024,
          0.0247510476,
          0.0030629721,
          0.044820061,
          0.0112163652,
          -0.0462161656,
          0.0261555091,
          0.021425195,
          -0.0017782267,
          0.0132165521,
          0.003565528,
          -0.012721566,
          0.0030451849,
          0.0314140217,
          0.002561795,
          0.0094097545,
          0.0046326621,
          0.027918891,
          -0.0001985214,
          -0.0203515296,
          -0.0449526999,
          -0.049324777,
          0.0339811761,
          -0.0015118001,
          0.0255513927,
          -0.0244059088,
          0.0476550236,
          -0.0112955491,
          0.0109410547,
          0.0166275669,
          0.0358870272,
          0.0047341473,
          0.0175026925,
          0.0330752935,
          0.0400778912,
          -0.0057098429,
          0.0549822785,
          0.0249575377,
          -0.0539267398,
          0.001310837,
          0.0264896685,
          -0.0280901417,
          -0.0457617771,
          0.0252818977,
          -0.0615714397,
          -0.0162784872,
          -0.0168392593,
          -0.001737659,
          0.0117401746,
          -0.0278276023,
          0.0671484862,
          0.0097344711,
          -0.0498745255,
          -0.0106882048,
          -0.0237330985,
          -0.0206563447,
          -0.0371038597,
          -0.0208892776,
          0.0170151279,
          -0.0319064865,
          -0.021101259,
          -0.0259752646,
          -0.0362711288,
          0.0237161256,
          -0.0339497495,
          -0.0143124666,
          0.0201624027,
          -0.0129650992,
          -0.0265301792,
          0.0202020807,
          -0.0364882965,
          0.0435353778,
          -0.0827484541,
          0.0088117454,
          0.0073725465,
          0.0232468732,
          -0.1001119763,
          -0.0226904266,
          0.0037585272,
          0.0030153649,
          0.0273494879,
          -0.0267609167,
          0.0134391503,
          0.0316784456,
          -0.0104955763,
          0.0639710687,
          0.0314568533,
          -0.0109564727,
          -0.0527227223,
          0.0329704089,
          0.0100107568,
          -0.0147674573,
          0.0684847794,
          0.0432374328,
          0.0184351797,
          -0.0231699524,
          0.0432294328,
          0.0360460142,
          -0.0781643614,
          -0.0239654193,
          0.0114390473,
          0.0213035149,
          -0.0226763645,
          -0.0669837333,
          0.0505972933,
          -0.0184744503,
          -0.0164771829,
          -0.0324758692,
          -0.0089947698,
          -0.0075802015,
          0.0072822165,
          0.008036864,
          0.0546154771,
          -0.0015892952,
          -0.032046481,
          0.0083917968,
          0.0140606128,
          -0.0532184578,
          0.0259366482,
          -0.0135407554,
          0.0130791969,
          -0.0342340935,
          -0.0484932289,
          -0.0091900197,
          0.0106830248,
          -0.0110173686,
          -0.0065608573,
          -0.0312361708,
          0.0260169334,
          -0.0157254578,
          0.0122565676,
          0.0139813647,
          -0.0058268219,
          0.0097468575,
          0.0277675334,
          0.0105255871,
          0.0118502348,
          0.004360944,
          -0.0177294696,
          -0.0256175781,
          -0.0413263151,
          -0.002906081,
          -0.0138876745,
          -0.0290198857,
          0.0405666307,
          0.0097886132,
          -0.0099783186,
          0.0224281927,
          0.0481236894,
          0.0163261567,
          0.0085984123,
          -0.0028742743,
          -0.0436404534,
          0.0102204257,
          0.0080514514,
          -0.0703137666,
          -0.0153167299,
          0.0805338807,
          -0.0093183408,
          0.0182040446,
          0.0459854621,
          -0.0339496136,
          -0.0051672203,
          0.0107939821,
          0.059502529,
          -0.0044619894,
          -0.0076117853,
          0.0123816961,
          0.0189489885,
          0.021779608,
          -0.0322979754,
          0.0025013706,
          -0.0100260037,
          -0.0249140742,
          0.0329599539,
          -0.0506280698,
          -0.0147247042,
          0.0105057317,
          -0.072871767,
          -0.0216145348,
          -0.0403797859,
          0.0133730125,
          0.0435062926,
          -0.01408686,
          0.0343219312,
          0.0370326061,
          0.0075422657,
          0.0008292943,
          0.0261282632,
          0.0007756871,
          -0.0095796778,
          -0.0028812691,
          0.008734962,
          0.0242534578,
          -0.0332963001,
          0.0158668674,
          -0.0194178205,
          -0.0174290822,
          -0.0105666048,
          -0.0109116018,
          -0.0287718279,
          -0.014164262,
          -0.0067931365,
          -0.0570986811,
          -0.0154227456,
          0.0005764067,
          -0.0136265829,
          0.0755950026,
          0.0022353607,
          0.0216158922,
          0.0481730066,
          -0.0234925915,
          0.0121198909,
          -0.005730555,
          0.0068848745,
          -0.0512693767,
          -0.0107088899,
          -0.0242963657,
          0.0690175537,
          0.0530354977,
          -0.0270877425,
          -0.0041643876,
          0.0128149625,
          0.0014904868,
          -0.0253130458,
          0.0153452554,
          -0.0104513974,
          -0.0103376235,
          -0.0109739476,
          -0.0035711811,
          -0.0567680355,
          -0.0572295133,
          -0.0454008523,
          0.0178953111,
          -0.0343828425,
          -0.0406098589,
          0.0135173867,
          -0.0195088256,
          0.1085666679,
          0.0434594862,
          -0.0116252522,
          -0.0071550626,
          0.0077132264,
          -0.0013717869,
          0.0246369243,
          -0.0092116836,
          0.0085598079,
          0.0044245131,
          0.0069766916,
          0.0071130292,
          0.0420356821,
          0.0112587367,
          0.0107349633,
          0.0024746935,
          -0.0288804574,
          0.0364222471,
          2.22279e-05,
          0.0134440009,
          -0.0242733909,
          0.0097588906,
          0.0018423903,
          0.0140374103,
          -0.0418689158,
          0.0003235792,
          -0.0565194841,
          -0.0033319797,
          -0.0029897626,
          -0.0286796167,
          0.0238353945,
          0.0286104567,
          -0.0327952988,
          0.0242974497,
          0.0301942434,
          0.0135312187,
          -0.0053600584,
          0.0047629696,
          -0.0188735407,
          -0.0325853936,
          0.0248022284,
          -0.0626570545,
          0.0018574047,
          0.0201265647,
          0.0203421252,
          -0.0259434199,
          -0.011335569,
          0.0046902918,
          -0.0254794313,
          0.0088647371,
          -0.0157687874,
          -0.0379056372,
          0.0442250669,
          0.0427994151,
          -0.0087935239,
          -0.0104794405,
          -0.01282555,
          0.0279390337,
          -0.0138499653,
          -0.0254895268,
          -0.0047920152,
          0.0502022561,
          0.0399305895,
          -0.0564173888,
          0.0085074713,
          -0.0170037332,
          -0.022382007,
          -0.041370118,
          -0.0306008924,
          -0.043518912,
          0.0221272795,
          0.000118158,
          0.0566185322,
          -0.0062434074,
          0.0125599738,
          -0.0374279432,
          0.0044725636,
          0.0571066644,
          0.0100407568,
          0.0044323183,
          -0.0683754273,
          0.0268178387,
          -0.0373156425,
          0.0301328395,
          0.0001857714,
          -0.0314984107,
          0.0294869328,
          0.017967172,
          0.0113734738,
          -0.00394222,
          -0.0067517313,
          -0.0525863729,
          0.0043712482,
          0.0240512956,
          -0.0152615299,
          0.0083053313,
          0.035830263,
          0.0596036687,
          0.001084915,
          0.0274215965,
          -0.0083394963,
          -0.003546685,
          -0.0078202388,
          0.0520733595,
          0.009566308,
          0.0151153915,
          -0.0472261682,
          -0.0265834872,
          -0.0071314351,
          -0.0045102217,
          0.0317689022,
          -0.0182127124,
          -0.0014680123,
          0.0310613466,
          -0.0410241559,
          -0.0211301874,
          0.0254041664,
          -0.0285313334,
          0.0285307867,
          -0.006777943,
          0.0125197147,
          -0.0014685488,
          -0.0233799098,
          -0.0424125046,
          -0.0412619486,
          -0.0558837485,
          -0.0067346017,
          -0.0203179703,
          -0.0245684367,
          -0.0294129411,
          -0.0270293178,
          0.0158301149,
          0.0297166873,
          -0.0144041379,
          0.0324114403,
          0.0123322681,
          -0.0162915636,
          -0.0265275203,
          -0.0293969363,
          -0.011801058,
          -0.0068774761,
          -0.0185875776,
          0.0136620984,
          0.0119626429,
          0.0229835417,
          0.0135409874,
          -0.0041573161,
          0.0415141862,
          -0.0123943039,
          0.037717958,
          0.001327082,
          0.0371494833,
          0.0070614796,
          0.0473115519,
          0.0189444348,
          -0.0229229797,
          0.0026650913,
          -0.0132745001,
          -0.031721944,
          0.0159563392,
          -0.0222711838,
          0.0017266609,
          0.013482797,
          -0.0101477276,
          -0.0732171945,
          -0.0496302051,
          0.0146264501,
          0.0139095762,
          0.0020276055,
          0.0342848627,
          -0.0142792026,
          -0.0189744204,
          0.0243131528,
          8.8227e-05,
          -0.0117055518,
          0.0259396154,
          -0.0010785824,
          -0.0262378259,
          -0.0363453496,
          -0.0361583941,
          -0.0349081066,
          0.0046126125,
          0.0271006403,
          0.0005473921,
          -0.0152047626,
          -0.0215216838,
          0.0315656113,
          -0.0202712817,
          0.0217738682,
          -0.0077563226,
          -0.0276084393,
          0.0102297546,
          -0.0393830538,
          0.0016447017,
          0.0343459807,
          -0.0205569412,
          -0.0024927475,
          -0.0518457741,
          -0.0443425924,
          -0.0643463861,
          0.0122194923,
          0.0123334276,
          0.0031957151,
          -0.0187209183,
          -0.0045305763,
          0.022996516,
          0.035143978,
          -0.0124266907,
          0.010095572,
          -0.0051590581,
          0.0126074073,
          -0.0171831222,
          0.0085401753,
          0.0495496411,
          0.0146383434,
          0.0043416569,
          -0.0289697908,
          0.0130551578,
          0.0219865749,
          -0.0219597626,
          0.0344335865,
          -0.0165251563,
          0.0411338713,
          -0.0050593704,
          -0.0206819149,
          0.03209983,
          0.0274486681,
          -0.0098726582,
          -0.026350081,
          0.0096095833,
          0.0112215581,
          0.0193953398,
          -0.0011835999,
          0.0200495892,
          0.0354046216,
          0.043677168,
          0.0248607704,
          -0.0687263012,
          0.0165994214,
          -0.0258539729,
          0.0098878331,
          0.0112992409,
          0.0311468346,
          -0.0125540779,
          -0.0116042402,
          -0.0423964607,
          -0.0334610306,
          0.0011822255,
          0.0635054093,
          0.013323314,
          0.0127270209,
          -0.0127950674,
          -0.0283069033,
          -0.0149408672,
          0.0180597957,
          -0.0078269438,
          0.0208569001,
          -0.0138412993,
          -0.0280936584,
          0.0248900475,
          -0.0156734656,
          0.0226314617,
          0.0012756992,
          0.0223802691,
          -0.0218501789,
          -0.0139705278,
          -0.0389783997,
          0.0346586388,
          0.0013084521,
          -0.0028805109,
          -0.0253545847,
          0.0009789062,
          -0.0297836782,
          0.0258534737,
          -0.0113504163,
          0.0286378153,
          -0.0292007001,
          -0.0055028314,
          -0.0117682926,
          -0.0199590418,
          -0.0114959762,
          -0.0167837651,
          0.0118315094,
          0.0076607603,
          -0.0509788673,
          -0.0119167713,
          -0.0056460002,
          -0.0124090929,
          -0.033303502,
          0.0074171207,
          -0.0345122358,
          0.0006086836,
          -0.0099399006,
          0.018653526,
          -0.0202964153,
          -0.0528316926,
          0.0205120565,
          0.0042916564,
          -0.0266485624,
          -0.0122187301,
          0.0317133302,
          -0.0251677632,
          0.0138936848,
          0.0064582175,
          -0.0006149611,
          0.0288977958,
          0.0271551162,
          0.0195418308,
          0.0007519095,
          0.0276600523,
          0.0004843887,
          -0.003252143,
          0.0062322265,
          0.0314712422,
          0.0246484126,
          0.034393834,
          -0.0013687689,
          -0.0301824166,
          0.018005854,
          0.0042172711,
          0.0036022747,
          -0.0025687543,
          0.0066148971,
          -0.0527653079,
          -0.0014544106,
          0.0290636886,
          0.0501093678,
          -0.0266432231,
          0.0234489795,
          -0.0005524737,
          -0.0230495753,
          -0.0337764649,
          -0.0121923648,
          -0.0196970282,
          -0.0564060602,
          0.0047682514,
          -0.0059050056,
          -0.0293044839,
          0.0411084108,
          0.0263863336,
          -0.0156873716,
          -0.0328760203,
          -0.0201129932,
          0.0141793275,
          -0.0119536552,
          0.0247948011,
          -0.002398706,
          0.0139883922,
          -0.0190776633,
          -0.0088139218,
          -0.0338830613,
          -0.0095434897,
          -0.0310265357,
          -0.014089291,
          0.0120781378,
          0.0448582135,
          0.027681917,
          0.001769484,
          0.0128688174,
          -0.003443118,
          0.0052530247,
          -0.0155206455,
          -0.0262283972,
          -0.0386516135,
          0.0133058876,
          0.0008822058,
          0.0167246694,
          -0.0135974502,
          0.0291946176,
          -0.062256068,
          -0.0029269515,
          0.032809115,
          -0.0161329461,
          0.0233208956,
          -0.0111315264,
          -0.0079858165,
          -0.0231975308,
          -0.0184246395,
          0.0040160636,
          -0.0157283233,
          0.0211977167,
          -0.0016289568,
          0.0472244583,
          0.031310657,
          0.006546576,
          -0.0349013377,
          -0.0053068899,
          -0.019515852,
          -0.0108511792,
          0.0138443345,
          0.0168422363,
          -0.0237042438,
          -0.0072196653,
          0.0076275041,
          -0.0142662665,
          0.0113964616,
          0.0025944985,
          0.0148146295,
          -0.0139931422,
          0.0035364923,
          0.0069290784,
          -0.0225400478,
          0.0137602963,
          0.0076426133,
          -0.0086289157,
          0.0083780154,
          0.0138907852,
          -0.0099952531,
          -0.0703045726,
          0.0378413191,
          0.0084688882,
          0.0521840192,
          -0.0237670755,
          -0.0162029271,
          -0.017009276,
          0.0049767656,
          -0.0088560027,
          0.0083756301,
          -0.0553557742,
          -0.0001938561,
          -0.062024435,
          0.0046645293,
          0.006165492,
          0.0095233242,
          -0.0165787851,
          0.0320432307,
          0.0181198153,
          -0.0234695692,
          -0.0104843403,
          0.0199520253,
          -0.0278820079,
          0.0345390588,
          0.0038586878,
          -0.0182908741,
          -0.0242485153,
          -0.0029614341,
          -0.0176103814,
          0.0262131877,
          0.0169114904,
          -0.0232416652,
          -0.007794338,
          0.0129875168,
          0.0305716144,
          -0.0126583006,
          0.0018298965,
          0.0456683189,
          -0.0072588406,
          -0.0049339441,
          -0.0105252843,
          -0.0187989853,
          0.0105122612,
          -0.0019539392,
          -0.0018020339,
          -0.0217554839,
          -0.0006165128,
          0.0323068975,
          -0.0221442813,
          0.0135556494,
          -0.0035701569,
          -0.017037278,
          0.0077461067,
          0.0173493493,
          -0.0006905207,
          -0.0163285914,
          0.0179504994,
          -0.0004579644,
          0.0205579707,
          -0.0204102052,
          0.0138669382,
          0.006436621,
          -0.013759715,
          0.0039602143,
          -0.0186522705,
          -0.0465821102,
          -0.0116883395,
          0.025663252,
          -0.0350188622,
          -0.0277773123,
          -0.0097358727,
          -0.0554845538,
          0.0019084081,
          -0.0320152817,
          0.0164912585,
          0.014383391,
          -0.009794993,
          0.0191543372,
          0.0168279577,
          0.0184400873,
          0.0101239244,
          -0.0067869357,
          -0.0299866218,
          0.0233099083,
          0.0129781894,
          0.0322145289,
          -0.019037025,
          0.0144731165,
          -0.0063488367,
          0.0159826707,
          -0.0103140404,
          0.0252496824,
          0.0019256405,
          0.0098614427,
          -0.0004318696,
          -0.0446111057,
          -0.0344674466,
          -0.0095465595,
          0.0119604003,
          0.007003856,
          -0.022917429,
          0.0196920312,
          0.0384892207,
          0.0273791924,
          -0.0170723647,
          0.0123438328,
          -0.0149011045,
          0.027533493,
          -0.0237142323,
          0.0367432144,
          -0.0386397708,
          0.0013399575,
          -0.0125688156,
          0.0228218026,
          0.0171674357,
          -0.0376180336,
          -0.0240750546,
          0.0278303516,
          0.02969159,
          -0.006763286,
          0.0063892633,
          -0.0087241414,
          0.0125996098,
          -0.005055392,
          0.0453619156,
          0.006306129,
          0.0007105199,
          -0.0268941475,
          -0.013507653,
          0.0053457086,
          -0.0076807896,
          -0.0273071658,
          -0.021731901,
          0.0005813604,
          -0.0026004078,
          -0.0173024959,
          -0.0329877837,
          0.0307852468,
          -0.0612981357,
          -0.0512019843,
          0.0243315939,
          0.021453483,
          0.0183283957,
          -0.0065676454,
          0.0087458061,
          -0.0047751804,
          0.0089335053,
          0.0317722494,
          0.0305352267,
          -0.0287866937,
          0.0206942605,
          0.017507731,
          0.0235567549,
          0.0019685546,
          0.0130964001,
          -0.0229583597,
          -0.0266611651,
          -0.0437930971,
          0.0246639601,
          0.0119087888,
          0.0174484262,
          0.0086508966,
          -0.0297375387,
          -0.0201728526,
          -0.0196742537,
          0.0011358438,
          -0.0403288174,
          0.004965012,
          0.0275379438,
          0.0007311683,
          0.0128988802,
          0.0258689905,
          0.0062462637,
          0.0285585979,
          0.0347281601,
          0.0129378508,
          -0.0179571658,
          0.0131198564,
          0.0155893855,
          0.0161739425,
          -0.0071859553,
          -0.0222099656,
          -0.0052701799,
          -0.0034597625,
          0.0300946822,
          0.0231440812,
          -0.0082919442,
          -0.0059392396,
          -0.0008193153,
          0.0295743048,
          -0.0224283207,
          -0.035199983,
          -0.0201560445,
          -0.0104881325,
          -0.0081145989,
          -0.0194923365,
          -0.0424890406,
          -0.0190662285,
          -0.0035013357,
          -0.0621768683,
          -0.0032119284,
          0.0443698168,
          -0.0129828304,
          -0.0283086197,
          -0.0294732647,
          0.0175106558,
          0.0235237433,
          -0.0513534993,
          -0.0328186397,
          0.0471649561,
          0.0240283646,
          0.0032835955,
          -0.0298939086,
          0.0123556927,
          -0.008554836,
          -0.018998893,
          0.0123427063,
          -0.0237452695,
          -0.0189104313,
          -0.0311927106,
          -0.0339836478,
          -0.0170686999,
          0.001923544,
          -0.0069714017,
          -0.013558975,
          0.0411579739,
          0.004301903,
          -0.0071799159,
          0.0565728694,
          0.0106336433,
          -0.0070138925,
          -0.0023758677,
          -0.0165140135,
          -0.0426917048,
          -0.0067006819,
          -0.0100233126,
          -0.0149914483,
          0.0223015044,
          -0.0236977413,
          0.0113949552,
          0.0039764267,
          0.0062318553,
          -0.0147853852,
          -0.0219436288,
          0.0168209719,
          -0.0236749798,
          -0.0311028799,
          -0.0097233537,
          0.0151883112,
          0.0139663994,
          -0.0389204156,
          0.0027330718,
          -0.0385707244,
          0.007039932,
          -0.0286552981,
          0.0110675498,
          0.0107158994,
          0.0008162537,
          0.0618411694,
          0.014732372,
          -0.0266532609,
          0.0052050188,
          0.0143140818,
          0.0216234038,
          -0.0177241708,
          0.0013765366,
          0.022998455,
          -0.0080865112,
          -0.0121392007,
          -0.0079601337,
          -0.0104382033,
          0.0142855356,
          -0.0159876356,
          0.027655988,
          -0.0221884465,
          0.0052828062,
          0.0452780034,
          -0.0062911194,
          0.0063156516,
          0.0066648256,
          0.0008587219,
          0.0083451825,
          0.0002156028,
          0.0208936492,
          -0.0147810229,
          0.0294530168,
          -0.0073845441,
          -0.004280993,
          0.0087308034,
          0.0069845458,
          0.0012791543,
          -0.0503914934,
          0.0011068574,
          -0.0159388399,
          -0.0087029471,
          -0.0073090289,
          0.018643952,
          -0.0171639677,
          0.0615999009,
          -0.0352217713,
          0.0038000098,
          0.0273585552,
          -0.0292630354,
          0.0498508383,
          -0.0217249924,
          -0.0102110542,
          -0.0100581206,
          0.0314298952,
          -0.0416558757,
          -0.0343357744,
          0.0277127912,
          0.0130167049,
          -0.0139233619,
          0.0227490636,
          -0.0021589784,
          0.0023467194,
          0.0570113026,
          -0.0035012099,
          -0.011772685,
          -0.0275166528,
          0.010229804,
          -0.0003018142,
          0.0334740523,
          -0.0194029524,
          -0.0160384127,
          0.010042242,
          -0.0216172715,
          0.0285014082,
          0.012079594,
          0.0141246989,
          0.0244180486,
          0.0078284228,
          -0.0129530411,
          0.0030252112,
          0.0153076979,
          -0.04025192,
          0.0015262151,
          0.0048829256,
          0.0211715954,
          -0.0457568355,
          -0.0547554735,
          0.0294573531,
          -0.014013188,
          -0.0321681928,
          -0.0178808239,
          -0.0032382831,
          -0.0122121926,
          -0.0237880182,
          0.0079540021,
          -0.0067805462,
          -0.0144480215,
          0.0012709369,
          0.0155329518,
          0.0161004369,
          0.0108112018,
          -0.0001192993,
          0.0423552804,
          -0.050354952,
          -0.0191233493,
          0.021233514,
          0.0043363327,
          -0.0300705377,
          0.0333874011,
          -0.0249526324,
          -0.0225616442,
          -0.001512337,
          0.0065536622,
          0.0620925743,
          0.0084440393,
          0.0220573917,
          0.0081889186,
          0.0176407238,
          -0.0054061433,
          0.0170843424,
          0.0099311983,
          -0.008202032,
          0.0051925976,
          0.0101090921,
          0.0115440015,
          0.0397993196,
          0.0071757936,
          0.0001170964,
          -0.021807461,
          -0.0160876513,
          -0.0139173907,
          0.003646994,
          0.0224839915,
          -0.014372912,
          -0.0086214211,
          -0.0037543622,
          0.0581147503,
          0.0120563083,
          -0.003538206,
          -0.0093729079,
          0.0371970674,
          0.0361035652,
          0.0139398724,
          -0.0059047161,
          0.0059797105,
          0.0151711302,
          -0.0039165067,
          -0.0260887602,
          -0.0107957218,
          -0.0259912689,
          0.0260622008,
          0.0087301352,
          -0.0037599917,
          -0.0132420305,
          0.0159647162,
          -0.0009156202,
          0.0026450958,
          -0.0071987642,
          -0.0222598901,
          -0.0079613894,
          0.0105627372,
          -0.0080147823,
          -0.0414139573,
          0.0123595302,
          0.0033379477,
          -0.0098940528,
          0.0206044819,
          -0.0103836213,
          0.0234870678,
          0.0228454722,
          0.0092835028,
          -0.0409263568,
          0.0028657638,
          0.0325016333,
          -0.0090703,
          -0.01435707,
          -0.0132526662,
          0.0069138558,
          -0.016159581,
          -0.0122895364,
          0.0017824184,
          -0.003253663,
          0.0011549373,
          -0.0055235371,
          0.02003197,
          0.0354312919,
          0.0233294563,
          0.0180011746,
          -0.0085614352,
          0.0131853293,
          -0.0116594417,
          -0.0466028694,
          -0.0011652349,
          -0.0315116039,
          -0.0055954184,
          0.0112067726,
          -0.0187651743,
          -0.0573384464,
          0.0279013626,
          -0.0002659491,
          0.0506840777,
          -0.0214368468,
          -0.0199131214,
          0.027634684,
          0.0014825996,
          -0.008706864,
          -0.0141632929,
          0.0132416205,
          -0.0109945859,
          -0.0501975045,
          0.0191379786,
          0.0124201858,
          0.0390908681,
          0.0296810102,
          -0.0116931465,
          0.0171976956,
          0.0187476468,
          0.0117129893,
          -0.0253563263,
          0.0177112238,
          -0.0033753633,
          -0.0104596303,
          0.0102641598,
          0.0097249086,
          -0.0123975533,
          -0.0388653763,
          -0.0042032281,
          0.0087008816,
          0.0290538995,
          0.0290255882,
          -0.0019420314,
          -0.017692463,
          0.0102450509,
          -0.0189695181,
          0.0428724214,
          0.0862922147,
          -0.0375514543,
          0.0092033218,
          0.0111750383,
          0.0056543222,
          -0.0029317602,
          1.4706e-05,
          -0.0186440656,
          0.0082687514,
          0.0185669577,
          -0.0326346327,
          0.0092377606,
          -0.0154248937,
          -0.0284108613,
          -0.008147161,
          -0.0200179201,
          -0.052907357,
          0.0017872258,
          0.0024036046,
          -0.0237109084,
          0.0166867701,
          -0.0159577569,
          -0.0144808926,
          0.0022453324,
          0.0358293466,
          -0.0185226905,
          -0.0018014848,
          -0.0168030313,
          0.001193859,
          0.0105962654,
          0.0137368049,
          0.0100411463,
          -0.0220501181,
          0.0283756927,
          0.0295839598,
          -0.0122989514,
          -0.0050866155,
          -0.0181644442,
          1.85953e-05,
          0.0064652856,
          -0.0248745531,
          0.0017570975,
          0.0304714199,
          -0.008287981,
          -0.007738082,
          0.0280247247,
          -0.0232931376,
          0.0134276273,
          0.02019074,
          0.001278832,
          -0.0074083207,
          0.0107862331,
          -0.0037985275,
          -0.0125979553,
          0.0012725393,
          0.0116809583,
          0.0078562039,
          0.0055895742,
          -0.0175626157,
          0.0404093731,
          0.010193391,
          0.0194495427,
          -0.0035834163,
          0.0075671345,
          0.0414304044,
          0.0117223173,
          0.0326238535,
          0.005501835,
          0.0054584413,
          -0.0228439867,
          -0.0061286315,
          -0.0144641725,
          -0.0231852392,
          -0.0250087259,
          0.0056263356,
          0.0178126488,
          -0.0084812678,
          0.0072806423,
          0.0380458813,
          -0.0528050009,
          -0.0166050224,
          0.0001384306,
          -0.0087169651,
          -0.0148377018,
          0.0145871085,
          -0.0392263029,
          -0.0098691476,
          0.0127920252,
          -0.0046306516,
          -0.0076965111,
          -0.043984158,
          -0.0173758394,
          0.0009650717,
          0.0364898518,
          0.0162454257,
          0.0158016277,
          -0.0214507822,
          -0.0176878446,
          -0.0017056442,
          0.0222974457,
          -0.0321124345,
          -0.0027634043,
          -0.0058907499,
          0.0161007205,
          0.0092132732,
          0.0292733805,
          -0.0193495229,
          0.0100205089,
          0.0001319824,
          -0.003275043,
          -0.0007266781,
          -0.0168268755,
          -0.0011271431,
          -0.0011757535,
          -0.0231033699,
          -0.0116945109,
          -0.0026803146,
          0.0080043348,
          0.0294735273,
          0.0151480027,
          -0.0051818854,
          0.0151401996,
          0.0314801959,
          0.0171077265,
          0.01514734,
          0.0315364534,
          0.0181514211,
          -0.0096855189,
          0.0005991629,
          0.0030295781,
          0.0239730431,
          0.016350368,
          -0.0052410909,
          -0.0105262583,
          0.0196434651,
          -0.0274430038,
          0.0006171386,
          0.0393063771,
          0.003917732,
          0.0043159678,
          -0.0193972802,
          -0.0278123328,
          0.0215186998,
          -0.0127155372,
          0.0071376241,
          -0.0056981051,
          0.0062671688,
          0.0170862419,
          -0.013214085,
          -0.0053267742,
          0.0228879796,
          0.0464942399,
          0.0186227623,
          0.0016941329,
          0.0156333179,
          0.014851704,
          -0.0107604107,
          -0.0041772155,
          -0.0103042981,
          -0.0010843102,
          -0.0189561432,
          0.0115563357,
          0.0035528434,
          -0.0201172251,
          -0.000767694,
          0.0104827532,
          -0.0390136819,
          0.0183459881,
          0.0011834865,
          -0.0214433493,
          0.0200543534,
          0.0389484745,
          -0.0130498265,
          0.0121456853,
          0.0040672121,
          0.0018899995,
          0.0201982111,
          0.000674911,
          -0.0305275591,
          0.0279333973,
          0.0449496973,
          0.0346351024,
          0.0027836569,
          -0.0231950097,
          -0.0344973877,
          0.0152334222,
          -0.0175302946,
          -0.0018240074,
          0.0042953243,
          0.0100834402,
          0.001476832,
          -0.0024639955,
          -0.000219343,
          0.0213542152,
          -0.0102374922,
          0.0224985462,
          0.0165061797,
          -0.0498651341,
          0.0227559078,
          0.0075707458,
          0.0223038793,
          -0.0030334557,
          0.0192245068,
          -0.0174320759,
          -0.0162541242,
          -0.0088536311,
          0.0025560511,
          0.0296094147,
          0.0299870567,
          0.0180793479,
          0.0397585034,
          -0.0377658661,
          -0.0043609419,
          0.0004522722,
          0.0202458519,
          0.0038268169,
          0.0349268112,
          -0.0221233992,
          0.0055910461,
          0.0099607764,
          -0.000102294,
          0.0028750398,
          -0.0207046038,
          0.0209784992,
          -0.0228683148,
          -0.0266732778,
          0.0387142785,
          0.0116486056,
          -0.0109350407,
          -0.0215944992,
          -0.0127324024,
          0.0128356086,
          -0.0066691746,
          0.0064353832,
          -0.0253482545,
          -0.0084125935,
          -0.020714107,
          -0.0526107457,
          0.0125670212,
          -0.0206495835,
          -0.0158664281,
          0.0043003099,
          -0.0226468146,
          0.0054193679,
          -0.0333997011,
          0.0035430955,
          0.0308557739,
          -0.0064729301,
          0.0261701075,
          -0.0143727483,
          0.0123496281,
          0.0136329248,
          -0.0468155686,
          -0.0219790367,
          0.001162834,
          -0.016636143,
          -0.0114354631,
          0.0023762758,
          -0.0160112069,
          0.0088257028,
          0.0242972197,
          0.0150857102,
          -0.0293425806,
          -0.0048011068,
          -0.0212040823,
          -0.0254174182,
          -0.0022541548,
          0.0079113794,
          -0.0013400633,
          -0.0048384984,
          -0.01167943,
          -0.00766069,
          0.0282613733,
          0.0183297349,
          0.0231312765,
          -0.018856477,
          0.0397206526,
          0.0380018689,
          0.0357713811,
          0.0219325908,
          0.0025221258,
          -0.0441349894,
          -0.0170879532,
          -0.0131539698,
          0.0320430072,
          -0.0226847325,
          -0.0196359558,
          -0.0036325912,
          -0.029541933,
          -0.0305322818,
          -0.0224694498,
          0.000354826,
          -0.0199978631,
          0.0084045185,
          0.0342297852,
          0.000754404,
          0.0312280906,
          0.0055765312,
          0.0279080933,
          0.0324629601,
          0.0081172785,
          -0.0088378171,
          -0.0081261154,
          0.008638938,
          0.0196368406,
          0.0488362275,
          0.0522802565,
          0.0202423255,
          0.0486144051,
          -0.020001038,
          0.0072374057,
          -0.0053179219,
          -0.0091565691,
          -0.0214627581,
          -0.0033754956,
          0.018852212,
          -0.0051312624,
          0.0173799568,
          0.017100323,
          -0.0341060022,
          -0.0161861777,
          0.011689288,
          -0.0035516104,
          0.0104557616,
          0.0061532333,
          0.0100232554,
          -0.054382246,
          0.0074155398,
          0.032221769,
          -0.0220466219,
          0.0287379883,
          -0.0164338453,
          0.0061079694,
          0.0059549543,
          0.0179200657,
          -0.0153023284,
          0.0196214709,
          0.031968588,
          0.0143995145,
          -0.0035118494,
          0.0167545727,
          -0.0420995597,
          -0.005725068,
          0.025307761,
          0.0071321046,
          0.0253452258,
          0.0427169837,
          0.0342417238,
          -0.0163106546,
          0.0200308468,
          0.0135474214,
          0.0174872656,
          0.014503031,
          0.0093363146,
          0.0430711657,
          0.0024867117,
          -0.0184234409,
          -0.0403643344,
          -0.0111642838,
          0.0254351376,
          0.0087617312,
          0.0198128442,
          -0.0117915524,
          -0.0025111588,
          -0.0175184035,
          -0.0246213637,
          -0.0025733698,
          -0.0132481763,
          0.0075648512,
          0.003997459,
          -0.0231501083,
          0.0155540621,
          0.0059564909,
          0.0015559826,
          0.0008066939,
          -0.0042139993,
          0.0158147188,
          0.0324117988,
          0.0060597091,
          -0.002888057,
          -0.0250977064,
          -0.023758444,
          -0.0350905582,
          -0.0113838352,
          0.0287387315,
          0.0339500736,
          -0.0103591443,
          -0.0195012605,
          -0.000238782
        ]
      }
    },
    "pca500_embeddings.npy": null
  }
}